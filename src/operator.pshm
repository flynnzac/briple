/* 
   WOB is a Register BASED ENVIRONMENT AND LANGUAGE
   Copyright 2019 Zach Flynn

   This file is part of WOB.

   WOB is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   WOB is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with WOB (in COPYING file).  If not, see <https://www.gnu.org/licenses/>.
   
*/

`#include "wob.h"'

`#include <errno.h>'


#FREE=`
`#ifdef GARBAGE
#undef free''`
free(#data~);
`#define free(x)
#endif
''@


#CHECK_ARGS=`check_length(&#a~, #length~+1, "#op~", reg->task->task);
if (is_error(-1, reg->task->task)) return #retcheck~;'@

#GETARG=`
data* arg#num~ = resolve(a.arg_array[#num~], reg);

if (#requireans~)
  {
    if (arg#num~ == NULL)
      {
        char* err_msg;
        err_msg = malloc(sizeof(char)*(strlen("<#op~> requires at least  arguments.")+digits(#num~)+1));
        sprintf(err_msg, "<#op~> requires at least %d arguments.", #num~);
        do_error(err_msg, reg->task->task);
        free(err_msg);
        return #retfail~;
      }
  }
if (arg#num~ != NULL && #checktype~ && (!(arg#num~->type & #type~)))
  {
    char* err_msg = malloc(sizeof(char)*(strlen("Argument  of <#op~> should be of type #type~.")+digits(#num~)+1));
    sprintf(err_msg, "Argument %d of <#op~> should be of type #type~.", #num~);
    do_error(err_msg, reg->task->task);
    free(err_msg);
    return #retfail~;
  }
'
@;

#requireans=true@
#checktype=true@


void
op_range (arg a, registry* reg)
{
  #op=range@

  #a=a@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Integer@
  ##GETARG~$;

  #num=2@
  ##GETARG~$;

  mpz_t by;
  mpz_init(by);
  mpz_set_ui(by, 1);
  
  if (a.length >= 4)
    {
      #num=3@
      ##GETARG~$;
      mpz_set(by, *((mpz_t*) arg3->data));
    }

  mpz_t* lb = (mpz_t*) arg1->data;
  mpz_t* ub = (mpz_t*) arg2->data;

  mpz_t elements;
  mpz_init(elements);
  mpz_sub(elements, *ub, *lb);
  mpz_cdiv_q(elements, elements, by);
  
  registry* r_new = new_registry
    (reg,new_hash_size(mpz_get_ui(elements)), reg->task);

  mpz_t cur;
  mpz_init_set(cur, *lb);
  
  int i = 1;
  char* r = NULL;
  data* d_tmp;
  while (mpz_cmp(cur,*ub) <= 0)
    {
      r = argument_name(i);
      assign_int(&d_tmp, cur);
      set(r_new, d_tmp, r, 0);
      free(r);
      i++;
      mpz_add(cur, cur, by);
    }

  d_tmp = new_data();
  d_tmp->type = Registry;
  d_tmp->data = r_new;

  ret_ans(reg,d_tmp);
  
}

void
op_list (arg a, registry* reg)
{
  registry* r_new = new_registry(reg, new_hash_size(a.length),
                                 reg->task);
  data* d;
  data* d_new;
  int i = 1;
  char* r = NULL;

  for (i=1; i < a.length; i++)
    {
      r = argument_name(i);
      d_new = copy_data(resolve(a.arg_array[i], reg));
      set(r_new, d_new, r, 0);
      free(r);
    }

  d = new_data();
  d->type = Registry;
  d->data = r_new;
  ret_ans(reg, d);

}

void
op_registry (arg a, registry* reg)
{
  if (a.length != 1)
    {
      #op=registry@
      #length=2@
      ##CHECK_ARGS~$;
    }
  
  registry* r_new = new_registry(reg, new_hash_size(a.length / 2 + 1),
                                 reg->task);
  data* d = NULL;
  data* d_data = NULL;
  data* d_new;

  for (int i = 1; i < a.length; i = i + 2)
    {
      d = a.arg_array[i];
      
      if (d->type != Register)
        {
          do_error("Expected a register.", reg->task->task);
          free_registry(r_new);
          return;
        }

      d_data = resolve(a.arg_array[i+1], reg);
      d_new = copy_data(d_data);
      set(r_new, d_new, ((regstr*) d->data)->name, 0);
    }


  d = new_data();
  d->type = Registry;
  d->data = r_new;
  ret_ans(reg, d);
}

void
op_arithmetic (arg a, registry* reg, const int code)
{
  data* d;
  data_type result_type = Integer;
  mpz_t int_value;
  mpz_init_set_si(int_value, 0);
  double dbl_value = 0.0;

  #op=arithmetic@
  for (int i = 1; i < a.length; i++)
    {
      #num=i@
      #type=`(Real|Integer)'@
      ##GETARG~$;

      if (argi->type == Real && result_type == Integer)
        {
          dbl_value = mpz_get_d(int_value);
          result_type = Real;
        }

      if (result_type == Integer)
        {
          if (i == 1)
            mpz_set(int_value, *((mpz_t*) argi->data));
          else
            switch (code)
              {
              case 1:
                mpz_add(int_value, int_value, *((mpz_t*) argi->data));
                break;
              case 2:
                mpz_mul(int_value, int_value, *((mpz_t*) argi->data));
                break;
              case 3:
                mpz_sub(int_value, int_value, *((mpz_t*) argi->data));
                break;
              case 4:
                mpz_fdiv_q(int_value,
                           int_value, *((mpz_t*) argi->data));
                break;
              }
        }
      else
        {
          double val;
          if (argi->type == Integer)
            val = mpz_get_d(*((mpz_t*) argi->data));
          else
            val = *((double*) argi->data);
	    
          if (i == 1)
            dbl_value = val;
          else
            switch (code)
              {
              case 1:
                dbl_value += val;
                break;
              case 2:
                dbl_value *= val;
                break;
              case 3:
                dbl_value -= val;
                break;
              case 4:
                dbl_value /= val;
              }
        }
    }

  if (result_type == Integer)
    assign_int(&d, int_value);
  else
    assign_real(&d, dbl_value);
	      
  ret_ans(reg, d);
}  

void
op_add (arg a, registry* reg)
{
  #op=add@
  #length=2@
  ##CHECK_ARGS~$;

  op_arithmetic(a, reg, 1);
}

void
op_mul (arg a, registry* reg)
{
  #op=mul@
  #length=2@
  ##CHECK_ARGS~$;

  op_arithmetic(a, reg, 2);
}

void
op_sub (arg a, registry* reg)
{
  #op=sub@
  #length=2@
  ##CHECK_ARGS~$;

  op_arithmetic(a, reg, 3);
}

void
op_div (arg a, registry* reg)
{
  #op=div@
  #length=2@
  ##CHECK_ARGS~$;

  op_arithmetic(a, reg, 4);
}

void
op_set (arg a, registry* reg)
{
  #op=set@

  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;

  #num=2@
  #checktype=false@
  ##GETARG~$;
  #checktype=true@

  registry* to_set;
  if (a.length >= 4)
    {
      #num=3@
      #type=Registry@
      ##GETARG~$;
      
      to_set = (registry*) arg3->data;
    }
  else
    {
      to_set = reg;
    }
  
  char* name = ((regstr*) arg1->data)->name;
  data* d = copy_data(arg2);
  set(to_set, d, name, 1);


}

void
op_get (arg a, registry* reg)
{
  #op=get@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;
  
  registry* to_look;
  if (a.length == 2)
    {
      to_look = reg;
    }
  else
    {
      #num=2@
      #type=Registry@
      ##GETARG~$;

      to_look = (registry*) arg2->data;
    }

  data* ans = lookup(to_look, ((regstr*) arg1->data)->key,
		     a.length==2);
  if (ans != NULL)
    {
      ans = copy_data(ans);
      ret_ans(reg, ans);
    }
}

void
op_if (arg a, registry* reg)
{
  #op=if@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Boolean@
  ##GETARG~$;

  #requireans=false@
  if (*((bool*) arg1->data))
    {
      if (a.length >= 3)
        {
          #num=2@
          #checktype=false@
          ##GETARG~$;
          #checktype=true@

          if (arg2 != NULL)
            {
              data* d = copy_data(arg2);
              ret_ans(reg, d);
            }
        }
    }
  else
    {
      if (a.length >= 4)
        {
          #num=3@
          #checktype=false@
          ##GETARG~$;
          #checktype=true@

          if (arg3 != NULL)
            {
              data* d = copy_data(arg3);
              ret_ans(reg,d);
            }
        }
    }
  #requireans=true@
}

void
op_sit (arg a, registry* reg)
{
  for (int i=1; i < a.length; i++)
    {
      (void) resolve(a.arg_array[i], reg);
    }
  return;
}


void
op_move (arg a, registry* reg)
{
  #op=move@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;

  #num=2@
  ##GETARG~$;

  mov(reg, (regstr*) arg1->data,
      (regstr*) arg2->data);
  
}

void
op_delete (arg a, registry* reg)
{
  #op=delete@
  #length=1@
  ##CHECK_ARGS~$;
  
  #num=1@
  #type=Register@
  ##GETARG~$;
  
  del(reg, ((regstr*) arg1->data)->key, 1, false);
}

void
op_free (arg a, registry* reg)
{
  #op=free@
  #length=1@
  ##CHECK_ARGS~$;
  
  #num=1@
  #type=Register@
  ##GETARG~$;
  
  del(reg, ((regstr*) arg1->data)->key, 1, true);
}

void
op_exit (arg a, registry* reg)
{
  int err = 0;
  if (a.length >= 2)
    {
      #op=exit@
      #num=1@
      #type=Integer@
      ##GETARG~$;

      err = mpz_get_si(*((mpz_t*) arg1->data));
    }
  is_exit(err+1, reg->task->task);
  is_error(1, reg->task->task);
}

void
op_exist (arg a, registry* reg)
{
  #op=exist@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;

  registry* to_use = reg;
  if (a.length >= 3)
    {
      #num=2@
      #type=Registry@
      ##GETARG~$;

      to_use = (registry*) arg2->data;
    }

  data* obj = get(to_use, ((regstr*) arg1->data)->key, a.length < 3 ? 1 : 0);
  data* d;
  if (obj == NULL)
    {
      assign_boolean(&d, false);
    }
  else
    {
      assign_boolean(&d, true);
    }

  ret_ans(reg,d);
}

void
op_answer (arg a, registry* reg)
{
  #op=answer@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #checktype=false@
  ##GETARG~$;
  #checktype=true@

  data* d = copy_data(arg1);
  ret_ans(reg, d);
}

int
op_comparison (arg a, registry* reg)
{
  #op=comparison@
  #length=2@
  #retcheck=-2@
  ##CHECK_ARGS~$;
  #retcheck=@

  #num=1@
  #type=`(Integer|Real)'@
  #retfail=-2@
  ##GETARG~$;

  #num=2@
  ##GETARG~$;

  #retfail=@

  if (arg1->type == Integer && arg2->type == Integer)
    {
      return mpz_cmp(*((mpz_t*) arg1->data), *((mpz_t*) arg2->data));
    }
  else
    {
      double dval1;
      double dval2;
      if (arg1->type == Integer)
        {
          dval1 = mpz_get_d(*((mpz_t*) arg1->data));
          dval2 = *((double*) arg2->data);
        }
      else if (arg2->type == Integer)
        {
          dval1 = *((double*) arg1->data);
          dval2 = mpz_get_d(*((mpz_t*) arg2->data));
        }
      else
        {
          dval1 = *((double*) arg1->data);
          dval2 = *((double*) arg2->data);
        }

      if (dval1 > dval2)
        {
          return 1;
        }
      else if (dval1 < dval2)
        {
          return -1;
        }
      else
        {
          return 0;
        }
            
    }
      
}

void
op_gt (arg a, registry* reg)
{
  data* d = NULL;
  int is_gt = op_comparison(a, reg);

  if (is_error(-1, reg->task->task))
    return;

  if (is_gt==1)
    assign_boolean(&d, true);
  else
    assign_boolean(&d, false);

  ret_ans(reg,d);
}

void
op_lt (arg a, registry* reg)
{
  data* d = NULL;
  int is_lt = op_comparison(a, reg);

  if (is_error(-1, reg->task->task))
    return;

  if (is_lt==-1)
    assign_boolean(&d, true);
  else
    assign_boolean(&d, false);

  ret_ans(reg,d);
}

void
op_eq (arg a, registry* reg)
{
  data* d = NULL;
  int is_eq = op_comparison(a, reg);

  if (is_error(-1, reg->task->task))
    return;

  if (is_eq==0)
    assign_boolean(&d, true);
  else
    assign_boolean(&d, false);

  ret_ans(reg,d);
}

void
op_gt_eq (arg a, registry* reg)
{
  data* d = NULL;
  int is_gteq = op_comparison(a, reg);

  if (is_error(-1, reg->task->task))
    return;

  if (is_gteq==1 || is_gteq==0)
    assign_boolean(&d, true);
  else
    assign_boolean(&d, false);

  ret_ans(reg,d);
}


void
op_lt_eq (arg a, registry* reg)
{
  data* d = NULL;
  int is_lteq = op_comparison(a, reg);

  if (is_error(-1, reg->task->task))
    return;

  if (is_lteq==-1 || is_lteq==0)
    assign_boolean(&d, true);
  else
    assign_boolean(&d, false);

  ret_ans(reg,d);
}

void
op_print (arg a, registry* reg)
{
  #op=print@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #checktype=false@
  ##GETARG~$;
  #checktype=true@
  print_settings settings = PRINT_NEWLINE;

  if (a.length >= 3)
    {
      #num=2@
      #requireans=false@
      #checktype=false@
      #type=Boolean@
      ##GETARG~$;
      #requireans=true@
      #checktype=true@


      if (arg2 != NULL && arg2->type == Boolean)
        {
          if (!*((bool*) arg2->data))
            settings = PRINT_PLAIN;
        }
    }
             
  print_data(arg1,settings);
}

void
op_string_length (arg a, registry* reg)
{
  #op=string-length@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  size_t len = u32_strlen((uint32_t*) arg1->data);

  mpz_t len_z;
  mpz_init_set_ui(len_z, len);
  data* d;
  assign_int(&d, len_z);

  ret_ans(reg, d);
  
}

void
op_string_append (arg a, registry* reg)
{
  #op=string-append@
  #length=2@
  ##CHECK_ARGS~$;

  size_t sz = 0;
  data* args[a.length-1];
  for (int i = 1; i < a.length; i++)
    {
      #num=i@
      #type=String@
      ##GETARG~$;
      args[i-1] = argi;
      sz += u32_strlen((uint32_t*) argi->data);
    }
  uint32_t* result = malloc(sizeof(uint32_t)*(sz+1));

  u32_strcpy(result, (uint32_t*) args[0]->data);
  for (int i=2; i < a.length; i++)
    {
      u32_strcat(result, (uint32_t*) args[i-1]->data);
    }

  data* d = new_data();
  d->type = String;
  d->data = result;

  ret_ans(reg, d);

}

void
op_source (arg a, registry* reg)
{
  #op=source@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  
  char* file = wob_u32_to_u8((uint32_t*) arg1->data,
                             u32_strlen((uint32_t*) arg1->data));

  FILE* f = fopen(file, "r");
  
  if (f == NULL)
    {
      char* msg = malloc(sizeof(char)*(strlen("File not found.")
                                       + strlen(file) +
                                       6));
      sprintf(msg, "File *%s* not found.", file);
      do_error(msg, reg->task->task);
      free(msg);
      return;
    }

  struct parser_state state = fresh_state(0);
  interact(f, &state, reg);
  free_state(&state);
  free(file);
  fclose(f);

}

void
op_do (arg a, registry* reg)
{
  #op=do@
  #length=2@
  ##CHECK_ARGS~$;

  data* arg1 = resolve(a.arg_array[1], reg);
  data** arg_registries = malloc(sizeof(data*)*
                                 (a.length-2));
  for (int i = 0; i < (a.length - 2); i++)
    {
      arg_registries[i] = resolve(a.arg_array[i+2], reg);
    }

  if (arg1 == NULL)
    {
      do_error("<do> requires an argument.", reg->task->task);
      free(arg_registries);
      return;
    }

  for (int i = 0; i < (a.length-2); i++)
    {
      if (arg_registries[i] == NULL)
        {
          do_error("<do> requires more than one argument.",
                   reg->task->task);
          free(arg_registries);
          return;
        }
    }
  

  if (arg1->type != Operation)
    {
      do_error("First argument to <do> must be an operation.",
               reg->task->task);
      return;
    }

  for (int i = 0; i < (a.length - 2); i++)
    {
      if (arg_registries[i]->type != Registry)
        {
          do_error("Arguments to <do> must be registries.",
                   reg->task->task);
          free(arg_registries);
          return;
        }
    }

  registry** arg_reg = malloc(sizeof(registry*)*(a.length-2));
  for (int i = 0; i < (a.length - 2); i++)
    {
      arg_reg[i] = (registry*) arg_registries[i]->data;
    }
  registry* ret_reg = new_registry(reg, WOB_HASH_SIZE,
                                   reg->task);
  data* d;
  arg a1;

  a1.length = 1 + a.length-2;

  a1.free_data = malloc(sizeof(int)*a1.length);
  for (int i = 0; i < a1.length; i++)
    a1.free_data[i] = 0;

  a1.arg_array = malloc(sizeof(data*)*a1.length);
  a1.arg_array[0] = arg1;
  for (int i = 1; i < a1.length; i++)
    a1.arg_array[i] = NULL;


  for  (int i = 0; i < arg_reg[0]->hash_size; i++)
    {
      content* c = arg_reg[0]->objects[i];
      if (c == NULL)
        continue;
      
      if (is_init_reg(c))
        continue;

      c = tail(c);
      while (c != NULL)
        {
          bool in_all = true;
          for (int j = 0; j < (a.length-2); j++)
            {
              d = get(arg_reg[j], c->key, 0);
              if (d==NULL)
                {
                  c = c->right;
                  in_all = false;
                  break;
                }
              else
                {
                  a1.arg_array[1+j] = d;
                }
            }

          if (!in_all)
            continue;

          compute(arg1, reg, a1);
          d = lookup(reg, reg->task->task->wob_hash_ans, 0);
          if (d == NULL)
            {
              do_error("Instruction in <do> did not set /ans register.",
                       reg->task->task);
              break;
            }
          d = copy_data(d);
          set(ret_reg, d, c->name, 1);
          
          c = c->right;
        }

      if (d == NULL)
        break;
    }

  if (!is_error(-1, reg->task->task))
    {
      d = new_data();
      d->type = Registry;
      d->data = ret_reg;
      ret_ans(reg, d);
    }
  
}

data*
register_arithmetic (regstr* rg, int diff, task_vars* task)
{
  char* cur_name = malloc(sizeof(char)*(strlen(rg->name)+1));
  strcpy(cur_name, rg->name);

  int i = strlen(cur_name)-1;
  int j;
  while (i >= 0 && isdigit((int) cur_name[i]))
    i--;

  if (i == (strlen(cur_name)-1))
    {
      i = 0;
    }
  
  i++;
  
  char* cur_num = malloc(sizeof(char)*(strlen(cur_name)-i + 1));
  for (j = i; j < strlen(cur_name); j++)
    {
      cur_num[j-i] = cur_name[j];
    }
  cur_num[strlen(cur_name)-i] = '\0';
  cur_name[i] = '\0';
  int num = atoi(cur_num)+diff;
  if (num < 1) num = 1;

  free(cur_num);

  char* new_name = malloc(sizeof(char)*(strlen(cur_name)+2));
  sprintf(new_name, "%s%d", cur_name, num);
  data* d = new_data();
  d->type = Register;
  d->data = malloc(sizeof(regstr));
  ((regstr*) d->data)->name = new_name;
  ((regstr*) d->data)->key = hash_str(new_name);
  free(cur_name);
  
  return d;
}
  

void
op_next (arg a, registry* reg)
{
  #op=next@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;

  data* d = register_arithmetic((regstr*) arg1->data, 1,
                                reg->task->task);
  if (d != NULL)
    ret_ans(reg,d);
}

void
op_previous (arg a, registry* reg)
{
  #op=previous@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;

  data* d = register_arithmetic((regstr*) arg1->data, -1,
                                reg->task->task);
  if (d != NULL)
    ret_ans(reg,d);
}


void
op_last (arg a, registry* reg)
{
  #op=last@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Registry@
  ##GETARG~$;

  #num=2@
  #type=Register@
  ##GETARG~$;

  registry* arg_reg = (registry*) arg1->data;
  char* name = NULL;
  int i = 1;
  data* d;
  char* root = ((regstr*) arg2->data)->name;
  name = vector_name(root, i);
  unsigned long hash_name = hash_str(name);

  while ((d = get(arg_reg, hash_name, 0)) != NULL)
    {
      i++;
      free(name);
      name = vector_name(root, i);
      hash_name = hash_str(name);
    }
  free(name);

  name = vector_name(root, i-1);

  d = new_data();
  d->type = Register;
  d->data = malloc(sizeof(regstr));
  ((regstr*) d->data)->name = name;
  ((regstr*) d->data)->key = hash_str(name);

  ret_ans(reg, d);
  
}



void
op_in (arg a, registry* reg)
{
  #op=in@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Registry@
  ##GETARG~$;

  #num=2@
  #type=Instruction@
  ##GETARG~$;

  ((registry*) arg1->data)->up = reg;

  execute_0(arg2, (registry*) arg1->data);
  
  data* ans = lookup((registry*) arg1->data, reg->task->task->wob_hash_ans, 0);
  if (ans != NULL)
    {
      ans = copy_data(ans);
      ret_ans(reg, ans);
    }
}

void
op_while (arg a, registry* reg)
{
  #op=while@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Instruction@
  ##GETARG~$;

  #num=2@
  ##GETARG~$;

  data* d;
  while (1)
    {
      execute_0(arg1, reg);
      
      if (is_error(-1, reg->task->task))
        break;
          
      d = get(reg, reg->task->task->wob_hash_ans, 0);

      if (d == NULL)
        {
          do_error("Instruction did not set *ans* to a value.",
                   reg->task->task);
          break;
        }

      if (d->type != Boolean)
        {
          do_error("First instruction should set *ans* to a Boolean.",
                   reg->task->task);
          break;
        }

      if (!(*(bool*) d->data))
        {
          break;
        }

      execute_0(arg2, reg);
      if (is_error(-1, reg->task->task))
        break;

    }

}

void
op_repeat (arg a, registry* reg)
{
  #op=repeat@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Integer@
  ##GETARG~$;

  #num=2@
  #type=Instruction@
  ##GETARG~$;

  mpz_t i;
  mpz_init_set_si(i, 0);
  while (mpz_cmp(i, *((mpz_t*) arg1->data)) < 0)
    {
      execute_0(arg2, reg);
      if (is_error(-1, reg->task->task)) break;
      mpz_add_ui(i, i, 1);
    }
}

void
op_to_register (arg a, registry* reg)
{
  #op=to-register@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=`(String|Integer)'@
  ##GETARG~$;

  data* d;

  if (arg1->type == String)
    {
      char* str = wob_u32_to_u8((uint32_t*) arg1->data,
                                u32_strlen((uint32_t*) arg1->data));
      assign_regstr(&d, str, hash_str(str));
      free(str);
    }
  else
    {
      int val = mpz_get_si(*((mpz_t*) arg1->data));
      char* name = argument_name(val);
      unsigned long hash_name = hash_str(name);
      assign_regstr(&d, name, hash_name);
      free(name);
    }

  ret_ans(reg,d);

}


void
op_collapse (arg a, registry* reg)
{
  #op=collapse@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Operation@
  ##GETARG~$;

  #num=2@
  #type=Registry@
  ##GETARG~$;

  const char* prefix = "t";
  if (a.length >= 4)
    {
      #num=3@
      #type=Register@
      ##GETARG~$;

      prefix = ((regstr*) arg3->data)->name;
    }

  data* d;
  char* second_name;
  char* first_name;
  int i = 2;
  registry* to_walk = (registry*) arg2->data;
  to_walk->up = reg;

  first_name = vector_name(prefix, 1);
  unsigned long first_hash = hash_str(first_name);
  second_name = vector_name(prefix, i);

  unsigned long second_hash = hash_str(second_name);
  registry* r = new_registry(to_walk, WOB_HASH_SIZE, reg->task);

  arg a1;
  a1.length = 3;
  a1.free_data = malloc(sizeof(int)*a1.length);
  a1.arg_array = malloc(sizeof(data*)*a1.length);
  for (int j = 0; j < a1.length; j++)
    {
      a1.free_data[j] = 0;
    }

  a1.arg_array[0] = arg1;
  
  data* d1;
  data* d2;

  int is_first = 1;
  
  while ((d = lookup(to_walk, second_hash, 0)) != NULL)
    {

      if (is_first)
        d1 = lookup(to_walk, first_hash, 0);
      
      d2 = lookup(to_walk, second_hash, 0);

      a1.arg_array[1] = d1;
      a1.arg_array[2] = d2;
        
      compute(arg1, r, a1);
      d1 = lookup(r, reg->task->task->wob_hash_ans, 0);

      if (d1 == NULL)
        {
          do_error("Operation did not set /ans register.",
                   reg->task->task);
          break;
        }
      
      if (is_first)
        {
          free(first_name);
          first_hash = reg->task->task->wob_hash_ans;
          is_first = 0;
        }
      i++;
      free(second_name);
      second_name = vector_name(prefix, i);
      second_hash = hash_str(second_name);
    }
  d = lookup(r, reg->task->task->wob_hash_ans, 0);
  if (d != NULL)
    {
      ret_ans(reg, copy_data(d));
    }

  free_registry(r);
  free(second_name);
  free_arg(&a1);
}

void
op_string_eq (arg a, registry* reg)
{
  #op=string-eq@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  #num=2@
  #type=String@
  ##GETARG~$;

  uint32_t* str1 = (uint32_t*) arg1->data;
  uint32_t* str2 = (uint32_t*) arg2->data;
  data* d;
  if (u32_strcmp(str1,str2) == 0)
    {
      assign_boolean(&d, true);
    }
  else
    {
      assign_boolean(&d, false);
    }

  ret_ans(reg, d);
}

void
op_char_eq (arg a, registry* reg)
{
  #op=char-eq@
  #length=3@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  #num=2@
  #type=Integer@
  ##GETARG~$;

  #num=3@
  #type=String@
  ##GETARG~$;

  uint32_t* str = (uint32_t*) arg1->data;
  uint32_t* str_cmp = (uint32_t*) arg3->data;

  mpz_t start;
  mpz_init_set(start, *((mpz_t*) arg2->data));

  size_t length = u32_strlen(str);

  wob_location(start, length);

  if (mpz_cmp_ui(start,length)>0 || (mpz_cmp_si(start,0) <= 0))
    {
      do_error("Index out of range.", reg->task->task);
      return;
    }

  uint32_t* first = str+mpz_get_ui(start)-1;

  bool res = first[0]==str_cmp[0];
  
  data* d = NULL;
  assign_boolean(&d, res);

  ret_ans(reg,d);

}

void
op_string_lt (arg a, registry* reg)
{
  #op=string-lt@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  #num=2@
  #type=String@
  ##GETARG~$;

  uint32_t* str1 = (uint32_t*) arg1->data;
  uint32_t* str2 = (uint32_t*) arg2->data;
  data* d;
  if (u32_strcmp(str1,str2) < 0)
    {
      assign_boolean(&d, true);
    }
  else
    {
      assign_boolean(&d, false);
    }

  ret_ans(reg, d);
}

void
op_string_gt (arg a, registry* reg)
{
  #op=string-gt@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  #num=2@
  #type=String@
  ##GETARG~$;

  uint32_t* str1 = (uint32_t*) arg1->data;
  uint32_t* str2 = (uint32_t*) arg2->data;
  data* d;
  if (u32_strcmp(str1,str2) > 0)
    {
      assign_boolean(&d, true);
    }
  else
    {
      assign_boolean(&d, false);
    }

  ret_ans(reg, d);
}


void
op_register_eq (arg a, registry* reg)
{
  #op=register-eq@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;

  #num=2@
  #type=Register@
  ##GETARG~$;
      
  data* d;

  if (((regstr*) arg1->data)->key == ((regstr*) arg2->data)->key)
    assign_boolean(&d,true);
  else
    assign_boolean(&d,false);

  ret_ans(reg,d);
}


void
op_save (arg a, registry* reg)
{
  #op=save@  
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  char* file = wob_u32_to_u8((uint32_t*) arg1->data,
                             u32_strlen((uint32_t*) arg1->data));
             
  save_outer(reg, file);

  free(file);

}

void
op_load (arg a, registry* reg)
{
  #op=load@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  char* fname = wob_u32_to_u8((uint32_t*) arg1->data,
                              u32_strlen((uint32_t*) arg1->data));
  
  gzFile f = gzopen(fname, "r");
  if (f == NULL)
    {
      do_error("File cannot be opened.",
               reg->task->task);
      return;
    }
  if (a.length >= 3)
    {
      #num=2@
      #type=Registry@
      ##GETARG~$;

      read_outer(f, (registry*) arg2->data);
    }
  else
    {
      read_outer(f, reg);
    }
  gzclose(f);

  free(fname);
}

void
op_to_string (arg a, registry* reg)
{
  #op=to-string@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=`(Integer | Real | Register)'@
  ##GETARG~$;

  char* result;
  if (arg1->type == Integer)
    {
      result = mpz_get_str(NULL, 10, *((mpz_t*) arg1->data));
    }
  else if (arg1->type == Real)
    {
      data* arg2 = NULL;
      if (a.length >= 3)
        {
          arg2 = resolve(a.arg_array[2], reg);
        }
      
      int prec = 6;
      if (arg2 != NULL && arg2->type != Integer)
        {
          do_error("The second argument to *to-string* should be an integer.",
                   reg->task->task);
          return;
        }
      if (arg2 != NULL)
        {
          prec = *((int*) arg2->data);
          if (prec < 0)
            {
              do_error("The second argument to *to-string* must be non-negative.",
                       reg->task->task);
              return;
            }
        }
      int n_digits;
      if (prec == 0)
        {
          n_digits = 1;
        }
      else
        {
          n_digits = floor(log10(prec)) + 1;
        }
      
      char* fmt = malloc(sizeof(char)*(strlen("%.f") + n_digits + 1));
      sprintf(fmt, "%%.%df", prec);

      int int_part = floor(*((double*) arg1->data));

      int int_size;
      if (int_part == 0)
        {
          int_size = 1;
        }
      else
        {
          int_size = floor(log10(int_part)) + 1;
        }
      result = malloc(sizeof(char)*(int_size+1+prec+1));
      sprintf(result, fmt, *((double*) arg1->data));
      free(fmt);
    }
  else
    {
      char* regstr_name = ((regstr*) arg1->data)->name;
      result = malloc(sizeof(char)*(strlen(regstr_name)+1));
      strcpy(result, regstr_name);
    }

  uint32_t* res32 = wob_u8_to_u32(result, strlen(result));
  data* d;
  assign_str(&d, res32, 0);
  ret_ans(reg, d);
  
  free(res32);
  
}

void
op_to_number (arg a, registry* reg)
{
  #op=to-number@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=`(String|Register)'@
  ##GETARG~$;

  if (arg1->type == String)
    {
      uint32_t* value = (uint32_t*) arg1->data;
      char* u8_value = wob_u32_to_u8(value, u32_strlen(value));
      data* d;
      if (is_integer(u8_value))
        {
          mpz_t result;
          mpz_init_set_str(result, u8_value, 10);
          assign_int(&d, result);
          mpz_clear(result);
          ret_ans(reg, d);
        }
      else if (is_real(u8_value) && (strcmp(u8_value, ".") != 0))
        {
          double result = atof(u8_value);
          assign_real(&d, result);
          ret_ans(reg, d);
        }
      else
        {
          do_error("String not a number.", reg->task->task);
        }

      free(u8_value);
    }
  else
    {
      char* name = ((regstr*) arg1->data)->name;
      int i = strlen(name);
      for (i = (strlen(name)-1); i >= 0; i--)
        {
          if (!isdigit(name[i]))
            break;
        }

      if (i >= (strlen(name)-1))
        {
          do_error("Register does not end in a number.",
                   reg->task->task);
          return;
        }

      name += i + 1;

      data* d;
      mpz_t m;
      mpz_init_set_str(m, name, 10);
      assign_int(&d, m);
      mpz_clear(m);
      ret_ans(reg,d);
    }
  
}

void
op_to_real (arg a, registry* reg)
{
  #op=to-real@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=`(Integer|Real|String)'@
  ##GETARG~$;

  data* d;
  if (arg1->type == Integer)
    assign_real(&d, mpz_get_d(*((mpz_t*) arg1->data)));
  else if (arg1->type == Real)
    d = copy_data(arg1);
  else
    {
      char* u8value = wob_u32_to_u8((uint32_t*) arg1->data,
                                    u32_strlen((uint32_t*) arg1->data));

      double result = atof(u8value);
      assign_real(&d, result);

      free(u8value);

    }
    
  ret_ans(reg,d);
  
}

void
op_output_code (arg a, registry* reg)
{
  #op=output-code@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  if (reg->task->task->source_code != NULL)
    {
      char* fname = wob_u32_to_u8((uint32_t*) arg1->data,
                                  u32_strlen((uint32_t*) arg1->data));
      FILE* f = fopen(fname, "w");
      fwrite(reg->task->task->source_code, sizeof(char),
             strlen(reg->task->task->source_code), f);
      fclose(f);
      free(fname);
      
    }
  else
    {
      do_error("No source saved yet.", reg->task->task);
      return;
    }
}

void
op_clear_code (arg a, registry* reg)
{
  if (reg->task->task->source_code != NULL)
    free(reg->task->task->source_code);

  reg->task->task->source_code = NULL;
}

void
op_error (arg a, registry* reg)
{
  #op=error@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  char* err_msg = wob_u32_to_u8((uint32_t*) arg1->data,
                                u32_strlen((uint32_t*) arg1->data));
  
  do_error(err_msg, reg->task->task);
  free(err_msg);
  
  if (a.length >= 3)
    {
      #num=2@
      #type=Integer@
      #requireans=false@
      ##GETARG~$;
      #requireans=true@
      if (arg2 != NULL)
        {
          is_error(mpz_get_si(*((mpz_t*) arg2->data)), reg->task->task);
        }
    }
}

void
op_is_type (arg a, registry* reg, const data_type type)
{
  #op=is-Type@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #checktype=false@
  ##GETARG~$;
  #checktype=true@
  data* d;
  if (arg1->type == type || ((type==Instruction) &&
                             (arg1->type==Operation)))
    {
      assign_boolean(&d, true);
    }
  else
    {
      assign_boolean(&d, false);
    }

  ret_ans(reg,d);
}

void
op_is_integer (arg a, registry* reg)
{
  op_is_type(a, reg, Integer);
}

void
op_is_real (arg a, registry* reg)
{
  op_is_type(a, reg, Real);
}

void
op_is_string (arg a, registry* reg)
{
  op_is_type(a, reg, String);
}

void
op_is_register (arg a, registry* reg)
{
  op_is_type(a, reg, Register);
}

void
op_is_registry (arg a, registry* reg)
{
  op_is_type(a, reg, Registry);
}

void
op_is_instruction (arg a, registry* reg)
{
  op_is_type(a, reg, Instruction);
}

void
op_is_file (arg a, registry* reg)
{
  op_is_type(a, reg, File);
}

void
op_is_nothing (arg a, registry* reg)
{
  op_is_type(a, reg, Nothing);
}

void
op_is_boolean (arg a, registry* reg)
{
  op_is_type(a, reg, Boolean);
}

void
op_is_operation (arg a, registry* reg)
{
  op_is_type(a, reg, Operation);
}


void
op_open_file (arg a, registry* reg)
{
  #op=open-file@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  FILE* f;
  char* fname = wob_u32_to_u8((uint32_t*) arg1->data,
                              u32_strlen((uint32_t*) arg1->data));
  if (a.length >= 3)
    {
      #num=2@
      #type=String@
      ##GETARG~$;

      f = fopen((char*) arg1->data, (char*) arg2->data);
    }
  else
    {
      f = fopen((char*) arg1->data, "r+");
    }

  free(fname);
  
  if (f == NULL)
    {
      do_error("File did not open.  Possibly, it does not exist.",
               reg->task->task);
      return;
    }

  data* d;

  assign_file(&d,f);
  ret_ans(reg,d);

}

void
op_read (arg a, registry* reg)
{
  #op=read@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=File@
  ##GETARG~$;

  int c = fgetc((FILE*) arg1->data);
  data* d;

  if (c == EOF || c == '\0')
    {
      assign_nothing(&d);
    }
  else
    {
      mpz_t m;
      mpz_init_set_si(m, c);
      assign_int(&d, m);
    }
  ret_ans(reg, d);
}

void
op_read_char (arg a, registry* reg)
{
  #op=read-char@  
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=File@
  ##GETARG~$;

  unsigned char* c = malloc(sizeof(char)*5);
  c[0] = fgetc((FILE*) arg1->data);
  int nbytes = 1;
  while (c[0] & (((unsigned char) 128)>>(nbytes-1)))
    {
      printf("%d: %d\n", nbytes, (((unsigned char) 128)>>(nbytes-1)));
      nbytes++;
    }
  nbytes = nbytes > 1 ? (nbytes-1) : 1;

  for (int i = 1; i < nbytes; i++)
    {
      c[i] = fgetc((FILE*) arg1->data);
    }
  
  data* d;
  if (c[0] == EOF || c[0] == '\0')
    {
      assign_nothing(&d);
    }
  else
    {
      c[nbytes] = '\0';
      uint32_t* c32 = wob_u8_to_u32(c, strlen(c));
      assign_str(&d, c32, 0);
    }
  ret_ans(reg,d);
}

void
op_close (arg a, registry* reg)
{
  #op=close@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;

  data* f = lookup(reg, ((regstr*) arg1->data)->key, 0);

  if (f == NULL)
    {
      do_error("Register does not exist.",
               reg->task->task);
      return;
    }

  if (f->type != File)
    {
      do_error("Register does not contain a file.",
               reg->task->task);
      return;
    }

  if (f->data != NULL)
    {
      fclose((FILE*) f->data);
    }

  del(reg, ((regstr*) arg1->data)->key, 1, false);
  
}

void
op_or (arg a, registry* reg)
{
  #op=or@
  #length=2@
  ##CHECK_ARGS~$;

  bool check = false;

  for (int i=1; i < a.length; i++)
    {
      #num=i@
      #type=Boolean@
      ##GETARG~$;
      if (*((bool*) argi->data))
        {
          check = true;
          break;
        }
    }

  data* d;
  assign_boolean(&d, check);

  ret_ans(reg,d);
}

void
op_and (arg a, registry* reg)
{
  #op=and@
  #length=2@
  ##CHECK_ARGS~$;

  bool check = true;
  for (int i=1; i < a.length; i++)
    {
      #num=i@
      #type=Boolean@
      ##GETARG~$;
      if (!(*((bool*) argi->data)))
        {
          check = false;
          break;
        }
    }

  data* d;
  assign_boolean(&d, check);

  ret_ans(reg,d);
}

void
op_not (arg a, registry* reg)
{
  #op=not@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Boolean@
  ##GETARG~$;

  data* d;
  if (*((bool*) arg1->data))
    {
      assign_boolean(&d, false);
    }
  else
    {
      assign_boolean(&d, true);
    }

  ret_ans(reg,d);
}

void
op_read_line (arg a, registry* reg)
{
  #op=read-line@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=File@
  ##GETARG~$;

  char* line  = NULL;
  size_t len = 0;
  ssize_t ret = getdelim(&line, &len, '\n', (FILE*) arg1->data);

  data* d;
  if (ret >= 0)
    {
      if (!feof((FILE*) arg1->data))
        line[strlen(line)-1] = '\0';

      uint32_t* u32_line = wob_u8_to_u32(line, strlen(line));
      assign_str(&d, u32_line, 0);

			#data=line@ 
      ##FREE~$;
      ret_ans(reg,d);
    }
  else
    {
      assign_nothing(&d);
      ret_ans(reg,d);

      #data=line@ 
      ##FREE~$;

    }
}

void
op_write_string (arg a, registry* reg)
{
  #op=write-string@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  #num=2@
  #type=File@
  ##GETARG~$;

  char* fname = wob_u32_to_u8((uint32_t*) arg1->data,
                              u32_strlen((uint32_t*) arg1->data));

  char* text = wob_u32_to_u8((uint32_t*) arg2->data,
                             u32_strlen((uint32_t*) arg2->data));

  fwrite((char*) arg1->data, sizeof(char), strlen((char*) arg1->data), (FILE*) arg2->data);

  free(fname);
  free(text);

}

void
op_write (arg a, registry* reg)
{
  #op=write@
  #length=2@

  #num=1@
  #type=Integer@
  ##GETARG~$;

  #num=2@
  #type=File@
  ##GETARG~$;

  int i = mpz_get_ui(*((mpz_t*) arg1->data));
  if ((i >= 255) || (i < 0))
    {
      do_error("Value should be in range [0,255].",
               reg->task->task);
      return;
    }
  else
    {
      char c = (char) i;
      fwrite(&c, sizeof(char), 1, (FILE*) arg2->data);
    }
}

void
op_input (arg a, registry* reg)
{
  #length=1@
  ##CHECK_ARGS~$;

  #op=input@
  #num=1@
  #type=Register@
  ##GETARG~$;

  char* input = readline("");
  data* d;

  uint32_t* str = wob_u8_to_u32(input, strlen(input));
                                
  assign_str(&d, str, 0);
  
  set(reg, d, ((regstr*) arg1->data)->name, 1);

}

void
op_shell (arg a, registry* reg)
{

  #op=shell@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  char* cmd = wob_u32_to_u8((uint32_t*) arg1->data,
                            u32_strlen((uint32_t*) arg1->data));
  FILE* f = popen(cmd, "r");

  uint32_t* raw;
  
  if (f == NULL)
    {
      do_error("Command failed.",
               reg->task->task);
      return;
    }

  char buffer[1024];
  data* d = NULL;
  while (fgets(buffer, sizeof(buffer)-1, f) != NULL)
    {
      if (d == NULL)
        {
          raw = wob_u8_to_u32(buffer, strlen(buffer));
          assign_str(&d, raw, 0);
        }
      else
        {
          raw = wob_u8_to_u32(buffer, strlen(buffer));
          d->data = realloc(d->data, sizeof(uint32_t)*(u32_strlen((uint32_t*) d->data)+u32_strlen(raw)+1));
          u32_strcat((uint32_t*) d->data, raw);
          free(raw);
        }
    }

  pclose(f);

  free(cmd);

  ret_ans(reg,d);
  
  
}

void
op_link (arg a, registry* reg)
{
  #op=link@
  #length=3@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  #num=2@
  ##GETARG~$;

  #num=3@
  ##GETARG~$;

  char* file = wob_u32_to_u8((uint32_t*) arg1->data,
                             u32_strlen((uint32_t*) arg1->data));
  
  void* lib = dlopen(file, RTLD_LAZY);

  if (lib == NULL)
    {
      printf("`%'s\n", dlerror());
      do_error("Library failed to open.", reg->task->task);
      return;
    }

  char* op_name = wob_u32_to_u8((uint32_t*) arg2->data,
                                u32_strlen((uint32_t*) arg2->data));
  
  operation new_op = dlsym(lib, op_name);
  if (new_op == NULL)
    {
      do_error("Error loading function.", reg->task->task);
      dlclose(lib);
      return;
    }

  char* wob_op_name = wob_u32_to_u8((uint32_t*) arg3->data,
                                    u32_strlen((uint32_t*) arg3->data));
  data* d;
  assign_op(&d, new_op, NULL, NULL, 0);
  set(reg, d, wob_op_name, 1);

  if (reg->task->task->wob_ll == NULL)
    {
      reg->task->task->wob_ll = malloc(sizeof(void*));
    }
  else
    {
      reg->task->task->wob_ll = realloc(reg->task->task->wob_ll,
                                    sizeof(void*)*(reg->task->task->wob_ll_cnt+1));
    }
  reg->task->task->wob_ll[reg->task->task->wob_ll_cnt] = lib;
  reg->task->task->wob_ll_cnt++;

  free(wob_op_name);
  free(op_name);
  free(file);
}

void
op_match (arg a, registry* reg)
{
  #op=match@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  #num=2@
  ##GETARG~$;

  char* str1 = wob_u32_to_u8((uint32_t*) arg1->data,
                             u32_strlen((uint32_t*) arg1->data));

  char* str2 = wob_u32_to_u8((uint32_t*) arg2->data,
                             u32_strlen((uint32_t*) arg2->data));
  

  int max_matches = 0;
  if (a.length >= 4)
    {
      #num=3@
      #type=Integer@
      ##GETARG~$;
      max_matches = mpz_get_ui(*((mpz_t*) arg3->data));
    }

  regex_t regex;
  int error = regcomp(&regex, str1, REG_EXTENDED);
  if (error)
    {
      do_error("Error compiling regular expression.", reg->task->task);
      return;
    }

  size_t n_groups = 10*(regex.re_nsub+1);
  regmatch_t* matches;


  data* d;
  assign_registry(&d, NULL, true, reg->task);
  int i;
  int j;
  char* to_add;
  char* name;
  data* d_str;
  data* d_reg;
  int n_matches = 0;
  char* cursor = str2;
  size_t offset;
  while (max_matches <= 0 || n_matches < max_matches)
    {
      matches = malloc(sizeof(regmatch_t)*n_groups);
      error = regexec(&regex, cursor, n_groups, matches, 0);
      if (!error)
        {
          assign_registry(&d_reg, NULL, true, reg->task);
          offset = 0;
          for (i=0; i < n_groups; i++)
            {
              if (matches[i].rm_so < 0)
                {
                  break;
                }
              else
                {
                  if (i==0) offset = matches[0].rm_eo;

                  to_add = malloc(sizeof(char)*(matches[i].rm_eo-
                                                matches[i].rm_so+2));
                  for (j=matches[i].rm_so; j < matches[i].rm_eo; j++)
                    {
                      to_add[j-matches[i].rm_so] = cursor[j];
                    }
                  to_add[j-matches[i].rm_so] = '\0';

                  uint32_t* u32_add = wob_u8_to_u32(to_add,
                                                    strlen(to_add));
                  
                  assign_str(&d_str, u32_add, 0);

                  name = argument_name(i);
                  set((registry*) d_reg->data, d_str, name, 1);
                  free(name);
                }
            }
          n_matches++;
          name = argument_name(n_matches);
          set((registry*) d->data, d_reg, name, 1);
          free(name);

          free(matches);
          cursor += offset;
        }
      else
        {
          free(matches);
          break;
        }
    }

  free(str1);
  free(str2);

  ret_ans(reg, d);
  
}

void
op_replace (arg a, registry* reg)
{
  #op=replace@
  #length=3@
  ##CHECK_ARGS~$;

  #type=String@
  #num=1@
  ##GETARG~$;

  #num=2@
  ##GETARG~$;

  #num=3@
  ##GETARG~$;

  char* str1 = wob_u32_to_u8((uint32_t*) arg1->data,
                             u32_strlen((uint32_t*) arg1->data));

  char* str2 = wob_u32_to_u8((uint32_t*) arg2->data,
                             u32_strlen((uint32_t*) arg2->data));

  char* str3 = wob_u32_to_u8((uint32_t*) arg3->data,
                             u32_strlen((uint32_t*) arg3->data));


  int max_replace = 0;
  if (a.length >= 5)
    {
      #num=4@
      #type=Integer@
      ##GETARG~$;
      max_replace = mpz_get_ui(*((mpz_t*) arg4->data));
    }

  regex_t regex;
  int error = regcomp(&regex, str1, REG_EXTENDED);
  if (error)
    {
      do_error("Error compiling regular expression.",
               reg->task->task);
      return;
    }

  regmatch_t* matches = malloc(sizeof(regmatch_t));

  data* d;
  assign_registry(&d, NULL, true, reg->task);


  char* cursor = str3;

  /* contains pairs of integers denoting ranges to copy from arg3->data.  After each pair insert string. */
  size_t offset;
  size_t n_ranges = 1;
  while (max_replace <= 0 || n_ranges <= max_replace)
    {
      error = regexec(&regex, cursor, 1, &matches[n_ranges-1], 0);
      if (!error)
        {
          offset = 0;
          if (matches[n_ranges].rm_so < 0)
            {
              break;
            }
          else
            {
              offset = matches[n_ranges-1].rm_eo;
              n_ranges++;
              matches = realloc(matches, n_ranges*sizeof(regmatch_t));
              cursor += offset;
            }
        }
      else
        {
          break;
        }
    }
  n_ranges--;

  size_t last = 0;
  int i;
  int j;
  char* final;
  cursor = str3;
  /* calculate size of final string */
  size_t final_sz = 0;
  size_t last_range = 0;
  for (i = 0; i < n_ranges; i++)
    {
      final_sz += matches[i].rm_so;
      final_sz += strlen(str2);
      last_range += matches[i].rm_eo;
    }
  final_sz += strlen(str3) - last_range;

  final = malloc(sizeof(char)*(final_sz+1));
  for (i = 0; i < n_ranges; i++)
    {
      for (j = 0; j < matches[i].rm_so; j++)
        {
          final[last+j] = cursor[j];
        }

      last += matches[i].rm_so;

      for (j = 0; j < strlen(str2); j++)
        {
          final[last+j] = str2[j];
        }

      last += strlen(str2);
      
      cursor += matches[i].rm_eo;
    }

  for (j = 0; j < (final_sz-last); j++)
    {
      final[last+j] = cursor[j];
    }
  final[final_sz] = '\0';

  uint32_t* u32_final = wob_u8_to_u32(final,
                                      strlen(final));
  
  assign_str(&d, u32_final, 0);
  ret_ans(reg,d);

  free(str1);
  free(str2);
  free(str3);
  free(matches);

}

void
op_log (arg a, registry* reg)
{
  #op=log@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=`(Integer|Real)'@
  ##GETARG~$;
  
  data* d;
  if (arg1->type == Integer)
    {
      assign_real(&d, log(mpz_get_d((*((mpz_t*) arg1->data)))));
    }
  else
    {
      assign_real(&d, log(*((double*) arg1->data)));
    }

  ret_ans(reg,d);
}


void
op_exp (arg a, registry* reg)
{
  #op=exp@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=`(Integer|Real)'@
  ##GETARG~$;

  data* d;
  if (arg1->type == Integer)
    {
      assign_real(&d, exp(mpz_get_d(*((mpz_t*) arg1->data))));
    }
  else
    {
      assign_real(&d, exp(*((double*) arg1->data)));
    }

  ret_ans(reg,d);
}

void
op_power (arg a, registry* reg)
{
  #op=power@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=`(Integer|Real)'@
  ##GETARG~$;

  #num=2@
  ##GETARG~$;

  double base;
  double power;
  data* d;
  if (arg1->type == Integer)
    {
      base = mpz_get_d(*((mpz_t*) arg1->data));
    }
  else
    {
      base = *((double*) arg1->data);
    }

  if (arg2->type == Integer)
    {
      power = mpz_get_d(*((mpz_t*) arg2->data));
    }
  else
    {
      power = *((double*) arg2->data);
    }

  assign_real(&d, pow(base,power));

  ret_ans(reg,d);
}

void
op_change_dir (arg a, registry* reg)
{
  #op=change-dir@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  char* dir = wob_u32_to_u8((uint32_t*) arg1->data,
                            u32_strlen((uint32_t*) arg1->data));

  int error = chdir(dir);

  free(dir);
  
  if (error)
    {
      do_error("Could not change directory.", reg->task->task);
      return;
    }

}


void
op_import (arg a, registry* reg)
{
  #op=import@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Registry@
  ##GETARG~$;

  registry* r1 = (registry*) arg1->data;

  for (int i = 0; i < r1->hash_size; i++)
    {
      content* c = r1->objects[i];

      if (c == NULL)
        continue;

      if (is_init_reg(c))
        continue;
      
      c = tail(c);
  
      data* d = NULL;
      while (c != NULL)
        {
          d = c->value;
          if (d != NULL)
            {
              d = copy_data(d);
              set(reg, d, (char*) c->name, 1);
            }
          c = c->right;
        }
    }
}


void
op_current_dir (arg a, registry* reg)
{
  char* dir = get_current_dir_name();
  if (dir == NULL)
    {
      do_error("Error getting current directory.", reg->task->task);
      return;
    }
  data* d;
  uint32_t* u32dir = wob_u8_to_u32(dir, strlen(dir));
  assign_str(&d, u32dir, 0);

  #data=dir@ 
  ##FREE~$; 

  ret_ans(reg,d);
}

void
op_substring (arg a, registry* reg)
{
  #op=substring@
  #length=3@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  #num=2@
  #type=Integer@
  ##GETARG~$;

  #num=3@
  ##GETARG~$;

  uint32_t* str = (uint32_t*) arg1->data;
  mpz_t start;
  mpz_t end;

  mpz_init_set(start, *((mpz_t*) arg2->data));
  mpz_init_set(end, *((mpz_t*) arg3->data));
  

  size_t length = u32_strlen(str);

  wob_location(start, length);
  wob_location(end, length);

  if (mpz_cmp_ui(start,length)>0 || (mpz_cmp_si(start,0) <= 0))
    {
      do_error("Index out of range.", reg->task->task);
      return;
    }


  if ((mpz_cmp_ui(end,length)>0) || (mpz_cmp_si(end,0) <= 0))
    {
      do_error("Index out of range.", reg->task->task);
      return;
    }

  if (mpz_cmp(start,end) > 0)
    {
      do_error("The starting position of the substring is greater than the ending position.", reg->task->task);
      return;
    }

  uint32_t* first = str+mpz_get_ui(start)-1;
  mpz_t diff;
  mpz_init(diff);
  mpz_sub(diff, end, start);
  size_t sz = mpz_get_ui(diff);

  uint32_t* result = malloc(sizeof(uint32_t)*(sz + 2));

  for (int i=0; i < (sz+1); i++)
    {
      result[i] = first[i];
    }

  result[sz+1] = (uint32_t) 0;

  data* d;
  assign_str(&d, result, 0);
  ret_ans(reg, d);

  mpz_clear(start);
  mpz_clear(end);
  mpz_clear(diff);
  
}

void
op_up (arg a, registry* reg)
{
  #op=up@
  #length=1@
  ##CHECK_ARGS~$;

  if (reg->up == NULL)
    {
      do_error("Cannot use *up* instruction at top-level registry.",
               reg->task->task);
      return;
    }

  arg a1 = gen_arg(a.length-1,0);
  for (int i=1; i < a.length; i++)
    {
      a1.arg_array[i-1] = resolve(a.arg_array[i], reg);
    }

  compute(a1.arg_array[0], reg->up, a1);

  data* d = lookup(reg->up, reg->task->task->wob_hash_ans, 0);
  if (d != NULL)
    {
      d = copy_data(d);
      ret_ans(reg, d);
    }

  free_arg(&a1);


}

void
op_code (arg a, registry* reg)
{
  #op=code@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Instruction@
  ##GETARG~$;

  data* d;
  char* code = ((instruction*) arg1->data)->code;
  uint32_t* u32code = wob_u8_to_u32(code, strlen(code));
  
  assign_str(&d, u32code, 0);

  ret_ans(reg, d);
      
}

void
op_is_error (arg a, registry* reg)
{
  #op=is-error@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Instruction@
  ##GETARG~$;

  int stop_thresh = reg->task->task->wob_stop_error_threshold;
  reg->task->task->wob_stop_error_threshold = 0;
  execute_0(arg1, reg);
  data* d;
  assign_boolean(&d, is_error(-1, reg->task->task) > 0 ? true : false);
  reg->task->task->wob_stop_error_threshold = stop_thresh;

  ret_ans(reg, d);
  is_error(0, reg->task->task);

}


void
op_call (arg a, registry* reg)
{
  #op=call@
  #length=1@
  ##CHECK_ARGS~$;
  _op_call(a,reg,1);
}

void
op_ignore_errors (arg a, registry* reg)
{
  #op=ignore-errors@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Instruction@
  ##GETARG~$;

  int stop_thresh = reg->task->task->wob_stop_error_threshold;
  reg->task->task->wob_stop_error_threshold = 0;
  execute_0(arg1, reg);
  reg->task->task->wob_stop_error_threshold = stop_thresh;
}

void
op_version (arg a, registry* reg)
{
  data* d;
  uint32_t* u32version = wob_u8_to_u32(PACKAGE_VERSION,
                                       strlen(PACKAGE_VERSION));
  assign_str(&d, u32version, 0);

  ret_ans(reg, d);
  
}

void
op_error_messages (arg a, registry* reg)
{
  #op=error-messages@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Boolean@
  ##GETARG~$;

  if (*((bool*) arg1->data))
    reg->task->task->wob_print_error_messages = true;
  else
    reg->task->task->wob_print_error_messages = false;

}

void
op_filter (arg a, registry* reg)
{
  #op=filter@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Registry@
  ##GETARG~$;

  #num=2@
  #type=Operation@
  ##GETARG~$;

  registry* r = (registry*) arg1->data;
  registry* result = new_registry(reg, r->hash_size, reg->task);
  arg a1;
  a1.length = 3;
  a1.free_data = malloc(sizeof(int)*a1.length);
  for (int i = 0; i < a1.length; i++)
    a1.free_data[i] = 0;

  a1.arg_array = malloc(sizeof(data*)*a1.length);
  a1.arg_array[0] = arg2;
  a1.arg_array[1] = NULL;
  a1.arg_array[2] = NULL;
  
  for (int i = 0; i < r->hash_size; i++)
    {
      content* c = r->objects[i];
      if (c == NULL)
        continue;

      if (is_init_reg(c))
        continue;

      c = tail(c);
      while (c != NULL)
        {
          if (c->value != NULL)
            {
              a1.arg_array[1] = c->value;
              data* key;
              assign_regstr(&key, c->name, c->key);
              a1.arg_array[2] = key;
              compute(arg2, reg, a1);
              data* d = lookup(reg, reg->task->task->wob_hash_ans, 0);
              if ((d != NULL) && (d->type == Boolean) &&
                  *((bool*) d->data))
                {
                  set(result, copy_data(c->value), c->name, 0);
                }
              free_data(key);
            }
          c = c->right;
        }
    }

  data* d;
  assign_registry(&d, result, false, reg->task);
  ret_ans(reg, d);
}

void
op_please (arg a, registry* reg)
{
  #op=please@

  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Instruction@
  ##GETARG~$;

  #num=2@
  #type=Instruction@
  ##GETARG~$;

  execute_0(arg1, reg);

  if (is_error(-1, reg->task->task))
    {
      is_error(0, reg->task->task);
      execute_0(arg2, reg);
    }
}

void
op_mod (arg a, registry* reg)
{

  #op=mod@

  #length=2@
  ##CHECK_ARGS~$;
  
  #num=1@
  #type=`Integer'@
  ##GETARG~$;

  #num=2@
  #type=`Integer'@
  ##GETARG~$;

  data* d;
  mpz_t res;
  mpz_init(res);
  mpz_fdiv_r(res, *((mpz_t*) arg1->data),
             *((mpz_t*) arg2->data));
  assign_int(&d, res);

  ret_ans(reg,d);
}

void
op_op (arg a, registry* reg)
{
  #op=op@

  #length=1@
  ##CHECK_ARGS~$;
    
  #num=1@
  #type=Instruction@
  ##GETARG~$;

  op_wrapper* new_op = malloc(sizeof(op_wrapper));
  new_op->n_arg = a.length-2;
  new_op->instr = copy_data(arg1);
  new_op->args = malloc(sizeof(data*)*new_op->n_arg);
  for (int i=2; i < a.length; i++)
    {
      #num=i@
      #type=Register@
      ##GETARG~$;

      new_op->args[i-2] = copy_data(argi);
    }

  data* d = malloc(sizeof(data));
  d->data = new_op;
  d->type = Operation;
  ret_ans(reg, d);
}

void
op_use (arg a, registry* reg)
{
  #op=use@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=String@
  ##GETARG~$;

  char* str1 = wob_u32_to_u8((uint32_t*) arg1->data,
                             u32_strlen((uint32_t*) arg1->data));


  char* home = getenv("HOME");
  char* fname = malloc(sizeof(char)*(strlen(home)+
                                     strlen(str1)+
                                     strlen(".dwobs/")+
                                     strlen("/.dwob")+1));
  sprintf(fname, "%s/.dwobs/%s.dwob", home, str1);
  gzFile f = gzopen(fname, "r");
  if (f == NULL)
    {
      do_error("File cannot be opened.",
               reg->task->task);
      free(fname);
      return;
    }

  free(str1);
  read_registry(f, reg);
  gzclose(f);
  free(fname);
}

static void
incr (data* d, mpz_t* shift)
{
  mpz_add(*((mpz_t*) d->data),
          *((mpz_t*) d->data),
          *shift);
}

void
op_incr (arg a, registry* reg)
{
  #op=incr@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=`(Integer|Real)'@
  ##GETARG~$;

  if (arg1->type == Integer)
    {

      if (a.length >= 3)
        {
          #num=2@
          #type=Integer@
          ##GETARG~$;
          incr(arg1, (mpz_t*) arg2->data);
        }
      else
        {
          mpz_t m;
          mpz_init_set_si(m, 1);
          incr(arg1, &m);
        }
    }
  else
    {
      double inc;
      if (a.length >= 3)
        {
          #num=2@
          #type=`(Real|Integer)'@
          ##GETARG~$;


          if (arg2->type == Integer)
            {
              inc = mpz_get_d(*((mpz_t*) arg2->data));
            }
          else
            {
              inc = *((double*) arg2->data);
            }
        }
      else
        {
          inc = 1;
        }
      *((double*) arg1->data) += inc;
    }
}

void
op_auto_rehash (arg a, registry* reg)
{
  #op=auto-rehash@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Boolean@
  ##GETARG~$;

  reg->task->task->wob_rehash = *((bool*) arg1->data);
}

void
op_rehash (arg a, registry* reg)
{
  #op=rehash@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Registry@
  ##GETARG~$;

  rehash((registry*) arg1->data);
  
}

void
op_clock (arg a, registry* reg)
{
  #op=clock@
  #length=0@
  ##CHECK_ARGS~$;

  struct timespec spec;
  int time_since_epoch;

  clock_gettime(CLOCK_REALTIME, &spec);
  time_since_epoch = spec.tv_sec;
  
  mpz_t z;
  mpz_init_set_si(z, time_since_epoch);
  mpz_mul_si(z, z, 1000);
  mpz_add_ui(z, z, floor(spec.tv_nsec / 1000000.0));

  data* d;

  assign_int(&d, z);
  mpz_clear(z);
  ret_ans(reg, d);  
}

void
op_make_time (arg a, registry* reg)
{
  #op=make-time@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Integer@
  ##GETARG~$;

  mpz_t z;
  mpz_init_set(z, *((mpz_t*) arg1->data));
  mpz_fdiv_q_ui(z, z, 1000);
  time_t t = mpz_get_si(z);
  mpz_clear(z);
  struct tm* loc = localtime(&t);

  registry* r = new_registry(reg, WOB_HASH_SIZE, reg->task);
  data* d;


  mpz_init_set_si(z, loc->tm_sec);
  assign_int(&d, z);
  mpz_clear(z);
  set(r, d, "second", 0);

  mpz_init_set_si(z, loc->tm_min);
  assign_int(&d, z);
  mpz_clear(z);
  set(r, d, "minute", 0);
  
  mpz_init_set_si(z, loc->tm_hour);
  assign_int(&d, z);
  mpz_clear(z);
  set(r, d, "hour", 0);
  
  mpz_init_set_si(z, loc->tm_mday);
  assign_int(&d, z);
  mpz_clear(z);
  set(r, d, "day", 0);
  
  mpz_init_set_si(z, loc->tm_mon);
  assign_int(&d, z);
  mpz_clear(z);
  set(r, d, "month", 0);

  mpz_init_set_si(z, loc->tm_year);
  assign_int(&d, z);
  mpz_clear(z);
  set(r, d, "year", 0);

  mpz_init_set_si(z,loc->tm_wday);
  assign_int(&d, z);
  mpz_clear(z);
  set(r, d, "day-of-week", 0);

  assign_registry(&d, r, false, reg->task);
  ret_ans(reg, d);
  
}

void
op_make_clock (arg a, registry* reg)
{
  #op=make-clock@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Registry@
  ##GETARG~$;

  struct tm time;

  registry* r = (registry*) arg1->data;
  data* d;

  d = get(r, hash_str("milliseconds"), 0);
  if (d == NULL || (d->type != Integer))
    {
      do_error("No Integer data at /milliseconds.", reg->task->task);
      return;
    }

  mpz_t* z_ms;
  z_ms = (mpz_t*) d->data;
  time_t ms = mpz_get_si(*z_ms);

  d = get(r, hash_str("seconds"), 0);
  if (d == NULL || (d->type != Integer))
    {
      do_error("No Integer data at /seconds.", reg->task->task);
      return;
    }

  time.tm_sec = mpz_get_si(*((mpz_t*) d->data));

  d = get(r, hash_str("minute"), 0);
  if (d == NULL || (d->type != Integer))
    {
      do_error("No Integer data at /minute.", reg->task->task);
      return;
    }

  time.tm_min = mpz_get_si(*((mpz_t*) d->data));
  
  d = get(r, hash_str("hour"), 0);
  if (d == NULL || (d->type != Integer))
    {
      do_error("No Integer data at /hour.", reg->task->task);
      return;
    }

  time.tm_hour = mpz_get_si(*((mpz_t*) d->data));
     
  d = get(r, hash_str("day"), 0);
  if (d == NULL || (d->type != Integer))
    {
      do_error("No Integer data at /day.", reg->task->task);
      return;
    }

  time.tm_mday = mpz_get_si(*((mpz_t*) d->data));

  d = get(r, hash_str("month"), 0);
  if (d == NULL || (d->type != Integer))
    {
      do_error("No Integer data at /month.", reg->task->task);
      return;
    }

  time.tm_mon = mpz_get_si(*((mpz_t*) d->data)) - 1;
  

  d = get(r, hash_str("year"), 0);
  if (d == NULL || (d->type != Integer))
    {
      do_error("No Integer data at /year.", reg->task->task);
      return;
    }

  time.tm_year = mpz_get_si(*((mpz_t*) d->data)) - 1900;

  time_t time_sec;
  time_sec = mktime(&time);

  time_sec = 1000*time_sec + ms;

  mpz_t z;
  mpz_init_set_si(z, time_sec);
  assign_int(&d, z);
  ret_ans(reg,d);
}

       

void
op_task (arg a, registry* reg)
{
  #op=task@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;

  #num=2@
  #type=Instruction@
  ##GETARG~$;

  registry* init_state = NULL;
  if (a.length >= 4)
    {
      #num=3@
      #type=Registry@
      ##GETARG~$;
      init_state = (registry*) arg3->data;
    }

  task* t = malloc(sizeof(task));
  t->task = new_task(t);
  if (init_state == NULL)
    {
      t->state = new_registry(t->task->current_parse_registry,
                              WOB_HASH_SIZE,
                              t);
    }
  else
    {
      t->state = copy_registry(init_state);
    }
  t->state->up = t->task->current_parse_registry;
  t->state->task = t;
  t->task->current_parse_registry = t->state;

  t->code = copy_instruction((instruction*) arg2->data);
  t->queued_instruction = new_registry(NULL, WOB_HASH_SIZE, t);
  
  t->pid = -1;
  t->thread = NULL;

  data* d = new_data();
  d->type = Task;
  d->data = t;

  set(reg, d, ((regstr*) arg1->data)->name, 1);
  
}

void
op_run_task (arg a, registry* reg)
{
  #op=run-task@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Task@
  ##GETARG~$;

  if (((task*) arg1->data)->thread != NULL)
    {
      do_error("Task already running.", reg->task->task);
      return;
    }

  pthread_t* pt = malloc(sizeof(pthread_t));
  int ret = pthread_create(pt, NULL, run_task_thread, arg1);
  if (ret)
    {
      do_error("Thread creation failed.", reg->task->task);
    }
  else
    {
      ((task*) arg1->data)->thread = pt;
    }
}

void
op_queue (arg a, registry* reg)
{
  #op=queue@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;

  #num=2@
  #checktype=false@
  ##GETARG~$;
  #checktype=true@

  data* d = copy_data(arg2);

  task* t;
  if (a.length >= 4)
    {
      #num=3@
      #type=Task@
      ##GETARG~$;
      t = (task*) arg3->data;
    }
  else
    {
      t = reg->task;
    }


  pthread_mutex_lock(&t->lock);
  
  if (t->queued_instruction == NULL)
    {
      do_error("Task has no queue.  Data cannot be queued.", reg->task->task);
    }
  else
    {
      set(t->queued_instruction, d,
          ((regstr*) arg1->data)->name, 0);
    }
  pthread_mutex_unlock(&t->lock);

}

void
op_accept (arg a, registry* reg)
{
  #op=accept@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;

  if (reg->task->queued_instruction==NULL)
    {
      /* We are in the main task. */
      do_error("Use <accept-or> from the main task.",
               reg->task->task);
      return;
    }
  
  task* t;
  if (a.length >= 3)
    {
      #num=2@
      #type=Task@
      ##GETARG~$;
      t = (task*) arg2->data;
    }
  else
    {
      t = reg->task;
    }

  pthread_mutex_lock(&t->lock);
  if (t->queued_instruction == NULL)
    {
      do_error("Task has no queue, cannot accept data.",
               reg->task->task);
      pthread_mutex_unlock(&t->lock);
      return;
    }
  pthread_mutex_unlock(&t->lock);
    
  data* d = NULL;
  while (d == NULL)
    {
      pthread_mutex_lock(&t->lock);
      d = get(t->queued_instruction,
              ((regstr*) arg1->data)->key,
              0);
      if (d==NULL)
        {
          pthread_mutex_unlock(&t->lock);
        }
    }

  del(t->queued_instruction, ((regstr*) arg1->data)->key,
      0, false);  
  ret_ans(reg, d);
  pthread_mutex_unlock(&t->lock);
}

void
op_select (arg a, registry* reg)
{
  #op=select@
  #length=1@
  ##CHECK_ARGS~$;

  int sz = ceil((a.length-1)/2);
  data* hashes[sz];
  data* actions[sz];

  int hash_idx = 0;
  int action_idx = 0;

  for (int i=1; i < a.length; i=i+2)
    {
      #num=i@
      #type=Register@
      ##GETARG~$;

      hashes[hash_idx] = argi;

      hash_idx++;
      int i1 = i+1;
      #num=i1@
      #type=Instruction@
      ##GETARG~$;
      actions[action_idx] = argi1;
      action_idx++;
    }

  if (hash_idx != action_idx)
    {
      do_error("Number of locations to select should match the number of actions to take on matching.",
               reg->task->task);
      return;
    }

  data* d = NULL;
  task* t = reg->task;

  pthread_mutex_lock(&t->lock);
  if (t->queued_instruction == NULL)
    {
      do_error("Task has no queue, cannot accept data.",
               reg->task->task);
      pthread_mutex_unlock(&t->lock);
      return;
    }
  pthread_mutex_unlock(&t->lock);

  int idx;
  while (d==NULL)
    {
      pthread_mutex_lock(&t->lock);
      for (int i=0; i < hash_idx; i++)
        {
          d = get(t->queued_instruction,
                  ((regstr*) hashes[i]->data)->key,
                  0);
          if (d != NULL)
            {
              idx = i;
              d = copy_data(d);
              ret_ans(reg,d);
              del(t->queued_instruction,
                  ((regstr*) hashes[idx]->data)->key,
                  1, false);

              break;
            }
        }
      if (d == NULL)
        {
          pthread_mutex_unlock(&t->lock);
        }
    }

  pthread_mutex_unlock(&t->lock);
  execute_0(actions[idx], reg);
  
}

void
op_accept_or (arg a, registry* reg)
{
  #op=accept-or@
  #length=2@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Register@
  ##GETARG~$;

  #num=2@
  #type=Instruction@
  ##GETARG~$;

  task* t;
  if (a.length >= 4)
    {
      #num=3@
      #type=Task@
      ##GETARG~$;
      t = (task*) arg3->data;
    }
  else
    {
      t = reg->task;
    }

  pthread_mutex_lock(&t->lock);
  data* d = get(t->queued_instruction,
                ((regstr*) arg1->data)->key,
                0);
  pthread_mutex_unlock(&t->lock);

  if (d==NULL)
    {
      execute_0(arg2, reg);
    }
  else
    {
      pthread_mutex_lock(&t->lock);
      del(t->queued_instruction, ((regstr*) arg1->data)->key,
          0, false);
      ret_ans(reg,d);
      pthread_mutex_unlock(&t->lock);
    }
}

void
op_rand (arg a, registry* reg)
{
  #op=rand@

  if (a.length >= 2)
    {
      #num=1@
      #type=Integer@
      ##GETARG~$;
      srand(mpz_get_si(*((mpz_t*) arg1->data)));
    }

  double r = ((double) rand()) / ((double) RAND_MAX);
  data* d;
  assign_real(&d, r);
  ret_ans(reg,d);
}

void op_floor (arg a, registry* reg)
{
  #op=floor@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Real@
  ##GETARG~$;

  int r = (int) floor(*((double*) arg1->data));
  mpz_t res;
  mpz_init(res);
  mpz_set_si(res, r);
  data* d;
  assign_int(&d, res);
  ret_ans(reg,d);
}

void op_ceiling (arg a, registry* reg)
{
  #op=ceiling@
  #length=1@
  ##CHECK_ARGS~$;

  #num=1@
  #type=Real@
  ##GETARG~$;

  int r = (int) ceil(*((double*) arg1->data));
  mpz_t res;
  mpz_init(res);
  mpz_set_si(res, r);
  data* d;
  assign_int(&d, res);
  ret_ans(reg,d);
}

void
op_interpreter (arg a, registry* reg)
{
  #op=interpreter@
  #length=0@
  ##CHECK_ARGS~$;

  data* d1 = NULL;
  data* d2 = NULL;

  for (int i=1; i < a.length; i = i + 2)
    {
      d1 = a.arg_array[i];
      if (d1->type != Register)
        {
          do_error("Expected a register.", reg->task->task);
          return;
        }

      d2 = resolve(a.arg_array[i+1], reg);
      d2 = copy_data(d2);
      set(reg->task->task->wob_options,
          d2, ((regstr*) d1->data)->name, 1);
    }
}

  
void
add_basic_ops (registry* reg)
{
  data* d;

  /* Registry operations */
  assign_op(&d, op_set, NULL, NULL, 0);
  set(reg, d, "set",1);

  assign_op(&d, op_registry, NULL, NULL, 0);
  set(reg,d,"registry",1);

  assign_op(&d, op_get, NULL, NULL, 0);
  set(reg,d,"get",1);

  assign_op(&d, op_move, NULL, NULL, 0);
  set(reg,d,"move",1);

  assign_op(&d, op_delete, NULL, NULL, 0);
  set(reg,d,"delete",1);

  assign_op(&d, op_exist, NULL, NULL, 0);
  set(reg,d,"exist",1);

  assign_op(&d, op_list, NULL, NULL, 0);
  set(reg,d,"list",1);

  assign_op(&d, op_is_registry, NULL, NULL, 0);
  set(reg,d,"is-registry",1);

  assign_op(&d, op_import, NULL, NULL, 0);
  set(reg,d,"import",1);

  assign_op(&d, op_free, NULL, NULL, 0);
  set(reg,d,"free",1);

  assign_op(&d, op_filter, NULL, NULL, 0);
  set(reg,d,"filter",1);

  assign_op(&d, op_auto_rehash, NULL, NULL, 0);
  set(reg,d,"auto-rehash",1);

  assign_op(&d, op_rehash, NULL, NULL, 0);
  set(reg,d,"rehash",1);

  assign_op(&d, op_range, NULL, NULL, 0);
  set(reg,d,"range",1);

  assign_op(&d, op_use, NULL, NULL, 0);
  set(reg,d,"use",1);


  /* Numeric operations */
  
  assign_op(&d, op_add, NULL, NULL, 0);
  set(reg,d,"add",1);

  assign_op(&d, op_mul, NULL, NULL, 0);
  set(reg,d,"mul",1);

  assign_op(&d, op_sub, NULL, NULL, 0);
  set(reg,d,"sub",1);

  assign_op(&d, op_div, NULL, NULL, 0);
  set(reg,d,"div",1);

  assign_op(&d, op_gt, NULL, NULL, 0);
  set(reg,d,"gt",1);

  assign_op(&d, op_lt, NULL, NULL, 0);
  set(reg,d,"lt",1);

  assign_op(&d, op_eq, NULL, NULL, 0);
  set(reg,d,"eq",1);

  assign_op(&d, op_lt_eq, NULL, NULL, 0);
  set(reg,d,"lt-eq",1);

  assign_op(&d, op_gt_eq, NULL, NULL, 0);
  set(reg,d,"gt-eq",1);

  assign_op(&d, op_to_string, NULL, NULL, 0);
  set(reg,d,"to-string",1);
  
  assign_op(&d, op_is_integer, NULL, NULL, 0);
  set(reg,d,"is-integer",1);

  assign_op(&d, op_is_real, NULL, NULL, 0);
  set(reg,d,"is-real",1);

  assign_op(&d, op_log, NULL, NULL, 0);
  set(reg,d,"log",1);

  assign_op(&d, op_exp, NULL, NULL, 0);
  set(reg,d,"exp",1);

  assign_op(&d, op_power, NULL, NULL, 0);
  set(reg,d,"power",1);

  assign_op(&d, op_mod, NULL, NULL, 0);
  set(reg,d,"mod",1);

  assign_op(&d, op_incr, NULL, NULL, 0);
  set(reg,d,"incr",1);

  assign_op(&d, op_floor, NULL, NULL, 0);
  set(reg,d, "floor",1);

  assign_op(&d, op_ceiling, NULL, NULL, 0);
  set(reg,d, "ceiling",1);
  

  /* Boolean operations */

  assign_op(&d, op_if, NULL, NULL, 0);
  set(reg,d,"if",1);

  assign_op(&d, op_and, NULL, NULL, 0);
  set(reg,d,"and",1);

  assign_op(&d, op_or, NULL, NULL, 0);
  set(reg,d,"or",1);

  assign_op(&d, op_not, NULL, NULL, 0);
  set(reg,d,"not",1);

  assign_op(&d, op_is_boolean, NULL, NULL, 0);
  set(reg,d,"is-boolean",1);

  /* Instruction operations */

  assign_op(&d, op_do, NULL, NULL, 0);
  set(reg,d,"do",1);

  assign_op(&d, op_in, NULL, NULL, 0);
  set(reg,d,"in",1);

  assign_op(&d, op_while, NULL, NULL, 0);
  set(reg,d,"while",1);

  assign_op(&d, op_collapse, NULL, NULL, 0);
  set(reg,d,"collapse",1);

  assign_op(&d, op_code, NULL, NULL, 0);
  set(reg,d,"code",1);

  assign_op(&d, op_call, NULL, NULL, 0);
  set(reg,d,"call",1);

  assign_op(&d, op_op, NULL, NULL, 0);
  set(reg,d,"op",1);

  assign_op(&d, op_is_instruction, NULL, NULL, 0);
  set(reg,d,"is-instruction",1);

  assign_op(&d, op_repeat, NULL, NULL, 0);
  set(reg,d,"repeat",1);

  assign_op(&d, op_is_operation, NULL, NULL, 0);
  set(reg,d,"is-operation",1);

  /* String operations */

  assign_op(&d, op_string_length, NULL, NULL, 0);
  set(reg,d,"string-length",1);

  assign_op(&d, op_string_append, NULL, NULL, 0);
  set(reg,d,"string-append",1);

  assign_op(&d, op_string_eq, NULL, NULL, 0);
  set(reg,d,"string-eq",1);

  assign_op(&d, op_string_gt, NULL, NULL, 0);
  set(reg,d,"string-gt",1);
  
  assign_op(&d, op_string_lt, NULL, NULL, 0);
  set(reg,d,"string-lt",1);

  assign_op(&d, op_to_number, NULL, NULL, 0);
  set(reg,d,"to-number",1);

  assign_op(&d, op_is_string, NULL, NULL, 0);
  set(reg,d,"is-string",1);

  assign_op(&d, op_match, NULL, NULL, 0);
  set(reg,d,"match",1);

  assign_op(&d, op_replace, NULL, NULL, 0);
  set(reg,d,"replace",1);

  assign_op(&d, op_substring, NULL, NULL, 0);
  set(reg,d,"substring",1);

  assign_op(&d, op_to_real, NULL, NULL, 0);
  set(reg,d,"to-real",1);

  assign_op(&d, op_char_eq, NULL, NULL, 0);
  set(reg,d,"char-eq",1);

  /* State and environment operations */

  assign_op(&d, op_exit, NULL, NULL, 0);
  set(reg,d,"exit",1);

  assign_op(&d, op_answer, NULL, NULL, 0);
  set(reg,d,"answer",1);

  assign_op(&d, op_sit, NULL, NULL, 0);
  set(reg,d,"sit",1);

  assign_op(&d, op_save, NULL, NULL, 0);
  set(reg,d,"save",1);

  assign_op(&d, op_load, NULL, NULL, 0);
  set(reg,d,"load",1);

  assign_op(&d, op_output_code, NULL, NULL, 0);
  set(reg,d,"output-code",1);

  assign_op(&d, op_clear_code, NULL, NULL, 0);
  set(reg,d,"clear-code",1);

  assign_op(&d, op_error, NULL, NULL, 0);
  set(reg,d,"error",1);

  assign_op(&d, op_up, NULL, NULL, 0);
  set(reg,d,"up",1);

  assign_op(&d, op_ignore_errors, NULL, NULL, 0);
  set(reg,d,"ignore-errors",1);

  assign_op(&d, op_error_messages, NULL, NULL, 0);
  set(reg,d,"error-messages",1);

  assign_op(&d, op_please, NULL, NULL, 0);
  set(reg,d,"please",1);

  assign_op(&d, op_source, NULL, NULL, 0);
  set(reg,d,"source",1);

  assign_op(&d, op_is_error, NULL, NULL, 0);
  set(reg,d,"is-error",1);

  assign_op(&d, op_version, NULL, NULL, 0);
  set(reg,d,"version",1);

  /* Register operations */

  assign_op(&d, op_next, NULL, NULL, 0);
  set(reg,d,"next",1);

  assign_op(&d, op_previous, NULL, NULL, 0);
  set(reg,d,"previous",1);

  assign_op(&d, op_last, NULL, NULL, 0);
  set(reg,d,"last",1);

  assign_op(&d, op_to_register, NULL, NULL, 0);
  set(reg,d,"to-register",1);

  assign_op(&d, op_register_eq, NULL, NULL, 0);
  set(reg,d,"register-eq",1);

  assign_op(&d, op_is_register, NULL, NULL, 0);
  set(reg,d,"is-register",1);

  /* File operations */

  assign_op(&d, op_is_file, NULL, NULL, 0);
  set(reg,d,"is-file",1);

  assign_op(&d, op_open_file, NULL, NULL, 0);
  set(reg,d,"open-file",1);

  assign_op(&d, op_read_char, NULL, NULL, 0);
  set(reg,d,"read-char",1);

  assign_op(&d, op_read, NULL, NULL, 0);
  set(reg,d,"read",1);

  assign_op(&d, op_close, NULL, NULL, 0);
  set(reg,d,"close",1);

  assign_op(&d, op_read_line, NULL, NULL, 0);
  set(reg,d,"read-line",1);
  
  assign_op(&d, op_write, NULL, NULL, 0);
  set(reg,d,"write",1);

  assign_op(&d, op_write_string, NULL, NULL, 0);
  set(reg,d,"write-string",1);


  /* Input, Output, Shell, and System */

  assign_op(&d, op_input, NULL, NULL, 0);
  set(reg,d,"input",1);

  assign_op(&d, op_shell, NULL, NULL, 0);
  set(reg,d,"shell",1);

  assign_op(&d, op_link, NULL, NULL, 0);
  set(reg,d,"link",1);

  assign_op(&d, op_change_dir, NULL, NULL, 0);
  set(reg,d,"change-dir",1);

  assign_op(&d, op_current_dir, NULL, NULL, 0);
  set(reg,d,"current-dir",1);

  assign_op(&d, op_print, NULL, NULL, 0);
  set(reg,d,"print",1);


  /* Time operations */

  assign_op(&d, op_clock, NULL, NULL, 0);
  set(reg,d,"clock",1);

  assign_op(&d, op_make_time, NULL, NULL, 0);
  set(reg,d,"make-time",1);

  assign_op(&d, op_make_clock, NULL, NULL, 0);
  set(reg,d,"make-clock",1);


  /* Nothing operations */

  assign_op(&d, op_is_nothing, NULL, NULL, 0);
  set(reg,d,"is-nothing",1);


  /* Task operations */

  assign_op(&d, op_task, NULL, NULL, 0);
  set(reg,d,"task",1);

  assign_op(&d, op_run_task, NULL, NULL, 0);
  set(reg,d,"run-task",1);

  assign_op(&d, op_queue, NULL, NULL, 0);
  set(reg,d,"queue",1);

  assign_op(&d, op_accept, NULL, NULL, 0);
  set(reg,d,"accept",1);

  assign_op(&d, op_select, NULL, NULL, 0);
  set(reg,d,"select",1);

  assign_op(&d, op_accept_or, NULL, NULL, 0);
  set(reg,d,"accept-or",1);

  /* Random operations */

  assign_op(&d, op_rand, NULL, NULL, 0);
  set(reg, d, "rand", 1);

  /* Interpreter options */

  assign_op(&d, op_interpreter, NULL, NULL, 0);
  set(reg, d, "interpreter", 1);


}
  
