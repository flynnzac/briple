# -*- org-html-preamble-format: (("en" "%t<br>%a<br>%T")); -*-
#+TITLE: SLOBIL
#+AUTHOR: Zach Flynn
#+DESCRIPTION: SLOBIL is A Object-Based Environment and Language. This manual describes how to use it.
#+SETUPFILE: theme-readtheorg-local.setup
#+OPTIONS: num:1

#+HTML_HEAD: <!-- Global site tag (gtag.js) - Google Analytics -->
#+HTML_HEAD: <script async src="https://www.googletagmanager.com/gtag/js?id=UA-59441513-2"></script>
#+HTML_HEAD: <script> window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'UA-59441513-2');</script>


* Introduction

SLOBIL is easy to use interactively. It is natural to write line-by-line in the REPL and has a command-like syntax.  SLOBIL programs can just be collections of functions executed in the SLOBIL REPL itself.

SLOBIL is a dynamically-typed language.  You do not define new types in the language.  Instead the language provides a few flexible types. The language has a prototype object system, i.e. reference instances of an object are used to create new instances and changes to parent instances cascade down the chain.  In other words, you do not declare an object a member of class X.  You say, this object is like that other object, except in these ways.

SLOBIL prioritizes what the caller of the code wants to do.  /Instructions/, which would be functions or procedures in other languages, do not have fixed argument lists and users can modify other aspects of the instruction that, perhaps, the original author did not intend.  The language gives you the sharp knife and lets you cut.

It is biased against strict encapsulation and towards flexibility for the end user.  

It has superficial syntax similarities to Tcl in that the language is a command-based language that uses different types of parenthesis to do different things.  Less superficially, similarly to Tcl, it lets everything be overwritten (with different semantics) and no keywords are reserved. The typing is much stronger than Tcl though, and the semantics of the two languages are different.  The object system is prototype-based instead of the class-based system in Tcl.

* The Language

** Lexical Elements

/Slots/ are represented by a forward-slash (=/=) followed by any non-whitespace characters.  Slot names are case-sensitive.  =/a= and =/A= refer to different slots. I use lower case names for slots with multiple words separated by hyphens.  Like this: =/a-name-for-a-slot=.

A /literal number/ is a sequence of digits ([0-9]) that includes at most one decimal point represented by a period.  It may also be preceded by a hyphen to indicate a negative number. A /literal number/ contains no spaces.

A /literal string/ is a sequence of characters where the first and last characters are double quotation marks.  A literal string can contain the following escape sequences preceded by a backwards slash =\=.

- =\= outputs =\=.
- =t= outputs tab
- =n= outputs newline
- =r= outputs carriage return
- ='= outputs a single quote character
  
A literal string outputs a double quotation mark when a single quotation mark is used ='=.  A literal string can contain whitespace, including newlines.

A /literal boolean/ value is a string of characters that is either =True= or =False=.

A /literal nothing/ value is a string of characters that is =Nothing=.

A single apostrophe (='=) is a token that starts a comment which is ended by a new line.

The following characters are /special tokens/: =[, (, {, ., }, ), ]=.

If a sequence of characters without any whitespace is (1) not a /literal string/, (2) not a /literal number/, (3) not a /special token/, (4) not a /comment/, (5) not a /literal boolean/, (6) not a /literal nothing/, and (7) does not begin with a forward slash, then it is considered a /data reference/.  Some names that are valid for slots are not valid for data references. Data references refer to the data currently inserted in the slot with the same name.

SLOBIL programs are whitespaced-separated lists of the above tokens.  

** Data and Types

Programmers do not define types.  The following are the data types: /Integer/, /Real/, /String/, /Slot/, /Object/, /Instruction/, /Expression/, /Operation/, /File/, /Boolean/, /Nothing/, and /Task/.

/Integer/'s are numbers without decimal points.  They are "big" and can be arbitrarily large in magnitude.

/Real/'s are numbers with decimal points.  They are double precision floating-points.

/String/'s are UTF-8 encoded character strings.  Internally, they are represented as UTF-32 strings for speed, but they output to UTF-8.

/Slot/'s indicate the location of data and also can act as symbols.  They are written by giving a name that begins with a forward-slash. 

/Object/'s can contain any number of slots and store data in these locations.  Code is executed inside of objects and can refer to data located in the object's slots.  Objects are represented internally as a hash table.

/Instruction/'s are SLOBIL code objects that are executed only when the programmer explicitly requests their execution.  They are the primary way programmers write functions, procedures, and methods.  Instructions are created by enclosing code between the tokens =(= and =)=.

/Expression/'s are SLOBIL code objects that are executed whenever the programmer requests their value, i.e. they are /lazy/.  Expressions are created by enclosing code between the tokens ={= and =}=.

/Operation/'s are code objects that take a series of positional arguments.  The built-in operations are written in C, but users can also define operations.

/File/'s are stream objects used for writing to external files.

/Boolean/'s are either /True/ or /False/.

/Nothing/ is the type for the literal nothing value /Nothing/.  Nothing else has this type.

/Task/'s are processes running on the computer.  When the program starts, it is in the main task.  Additional tasks can be created for multi-threaded programs.

/File/, /Task/, and /Object/ data are passed by reference.  All others are by value.


** Statements and Objects

A statement is a list of whitespace-separated tokens ended by a =.=.  Naturally, the tokens included in the list cannot include =.=.
#+BEGIN_SRC slobil
... TOKEN TOKEN ... TOKEN .
#+END_SRC

Statements happen inside /objects/.  The object a statement is executed in determines what data is returned by a /data reference/.  Data references look for a value in the relevant slot in the current object, if none is found, then they look for an object in the slot in the object containing the current object and so on.

Statements are executed effectively inside temporary objects.  Arguments in a statement generally determine the values located at slots in the temporary object.

Statements begin with an /operation/.  There are a few exceptions to this rule where the operation is automatically-selected based on the data type used for the first argument.  This is for convenience.  The entire language can be accessed with statements that begin with an /operation/.

The obligatory first statement in SLOBIL:
#+BEGIN_SRC slobil
... print "Hello, world!" .
#+END_SRC

*** Creating Objects

Objects are created by using the =object= operation, followed by an alternating sequence of slots and data elements.
#+BEGIN_SRC slobil
... object /number 10 /string "Hello!" /real 3.2 .
ans = an Object with:
number of type Integer, value: 10
string of type String, value: "Hello!"
real of type Real, value: 3.200000
#+END_SRC

The =object= operation sets the =/ans= slot to the relevant object. 

*** The =/ans= Slot

Each Object has a special slot called the =/ans= slot.  Many built-in operations put data in the =/ans= slot.  It is the standard place to return values from an instruction, operation, or expression.  For example,
#+BEGIN_SRC slobil
... add 4 5 .
ans = 9
... print ans .
9
#+END_SRC

*** Substatements

Substatements are statements included as an element of another statement.  They are surrounded by square brackets (=[]=) and executed in the order they appear in the statement /prior/ to the statement itself being evaluated.  When the outer statement is evaluated the substatements are replaced by the value each substatement set the =/ans= slot to after it was executed.

For example,
#+BEGIN_SRC slobil
    ... object /number 10 /string "Hello!" /real 3.2
    /object [ object /x 3 /y 2 ] .
    ans = an Object with:
    number of type Integer, value: 10
    string of type String, value: "Hello!"
    real of type Real, value: 3.200000
    object of type Object, value: an Object with:
    x of type Integer, value: 3
    y of type Integer, value: 2
    ... add 5 [ add 4 3 ] .
    ans = 12
#+END_SRC

Substatements do not need to include a =.= to end the last statement in the substatement.  They can, but they do not have to.  Substatements can include multiple statements.

*** Inserting Data Into Slots

Slots determine the location of data.  The =set= operation inserts data into a slot, like so:
#+BEGIN_SRC slobil
... set /number 10 .
... print number .
10
#+END_SRC

The =set= operation takes the slot to insert to and the data to insert as arguments.

The second line in the above example, =print number .=, demonstrates how to access the data located at a slot.  Simply omit the forward slash to get the data.

Because this is a common procedure in SLOBIL, if the first element of a statement is a slot, then SLOBIL assumes you want to call =set=.  For example, the above could have been written as:
#+BEGIN_SRC slobil
... /number 10 .
#+END_SRC

=set= has an optional third argument: the object whose slot we should insert the data into.  If the third argument is omitted, then the value is inserted into the current object's slot.
#+BEGIN_SRC slobil
... /rectangle [ object /length 10 /width 5 ] .
... print rectangle .
an Object with:
length of type Integer, value: 10
width of type Integer, value: 5
... /width 4 rectangle .
... print rectangle .
an Object with:
length of type Integer, value: 10
width of type Integer, value: 4
#+END_SRC

The =move= operation moves data between different slots without copying the data.
#+BEGIN_SRC slobil
... /x "Hello." .
... print x .
Hello.
... move /x /y .
... print y .
Hello.
... print x .
Error: Value at slot /x not found.
#+END_SRC

The =delete= operation removes data from the slot.
#+BEGIN_SRC slobil
... /x "Hello." .
... print x .
Hello
... delete /x .
... print x .
Error: Value at slot /x not found.
#+END_SRC

*** Instructions

Instructions are a data type that contains code to execute.  They are created by enclosing a series of statements in parenthesis.  The last statement in the parenthesis does not have to end with a period.

For example:
#+BEGIN_SRC slobil
... /add-one ( add t 1 ) .
... print add-one .
(  add t 1  )
#+END_SRC

The =call= operation calls an instruction in a temporary object determined by alternating slots and data values similar to the call to an object.  In effect, instructions are called with named arguments.

#+BEGIN_SRC slobil
... call add-one /t 4 .
ans = 5
#+END_SRC

When instructions execute, whatever data they set the =/ans= slot to in the temporary object in which they execute is sent back to the object from which they are called.  No other slots they assign are modified in the current object.

#+BEGIN_SRC slobil
... /circle-area
(
	/pi 3.1459 .
  /r2 [ power r 2 ] .
  mul r2 pi .
) .
... call circle-area /r 2
ans = 12.583600
... print ans.
12.583600
... print pi .
Error: Value at slot /pi not found.
-> print pi .
#+END_SRC

Calling instructions is a common thing to do.  So, if the first element of a statement is an instruction, SLOBIL assumes the programmer wants to =call= it.
#+BEGIN_SRC slobil
... circle-area /r 2 .
ans = 12.583600
#+END_SRC

Instructions are just code, they do not carry an environment around with them.  When the programmer =call='s an instruction, the programmer determines the environment the code is executed in.  Instructions do not have a fixed set of arguments but allow the caller of the code to manipulate the environment in which they are called arbitrarily.  For example:
#+BEGIN_SRC slobil
... /add-one ( add t 1 ) .
... add-one /t 5 .
ans = 6
... add-one /t 5 /add sub .
ans = 4
#+END_SRC

Any non-literal in an instruction can be changed by adjusting the environment in which the code is executed.

*** Getting data

The =get= operation sets the =/ans= slot to the data located at a certain slot.
#+BEGIN_SRC slobil
... /x "Hello." .
... /y [ object /test "Goodbye." ] .
... get /x .
ans = "Hello."
... get /test .
... get /test y .
ans = "Goodbye."
#+END_SRC

The second argument to =get= is the object to get the data from.  If it is omitted, the data is grabbed from the current object.  There is also a shorthand notation for getting data from an object.  The notation =object:slot= returns the data located at the slot within the object.  The notation can also be nested like =object:slot1:slot2= where another object is located at =object:slot1=.

#+BEGIN_SRC slobil
... print y:/test .
Goodbye
#+END_SRC

One limitation to the colon notation is that it cannot be used with substatements.
#+BEGIN_SRC slobil
  ... ' Will give an error
  ... print y:[ answer /test ] .
#+END_SRC

The =exist= operation tests whether data exists at a given slot in an object.  Like =get=, it has an optional second argument to give the object.  If the argument is omitted, it searches the current object.  It sets the =/ans= slot to =True= if data exists at the slot and =False= if the data does not.

#+BEGIN_SRC slobil
  ... exist /new-slot .
  ans = False.
  ... /new-slot 0 .
  ... exist /new-slot .
  ans = True.
#+END_SRC

*** Control flow operations

The =if= operation sets the =/ans= slot to its second argument if its first argument is =True= and to its third argument if its first argument is =False=.

#+BEGIN_SRC slobil
... if True "Hello." "Goodbye." .
ans = "Hello."
... if False "Hello." "Goodbye." .
ans = "Goodbye."
#+END_SRC

The =if= operation can be used for control flow by using Expressions.  Expressions are created by enclosing statements in ={}=.  The code in an expression is executed when its value is accessed.

#+BEGIN_SRC slobil
... /x 10 .
... if [ gt x 3 ] { print "x is greater than 3." } { print "x is less than three." } .
x is greater than 3.
... /x 1 .
... if [ gt x 3 ] { print "x is greater than 3." } { print "x is less than three." } .
x is less than three.
#+END_SRC

Expressions are like substatements in that they evaluate to what they set the =/ans= slot to.  Where they differ is that substatements are executed /before/ the main statement is evaluated.  Expressions are executed only when they are needed.  Expressions are necessary for the =if= operation to function as a control flow operation. If we wrote the above statements using substatements, all the statements would be evaluated regardless of the truth of the first argument.

#+BEGIN_SRC slobil
... if [ gt x 3 ] [ print "x is greater than 3." . answer 0 . ] [ print "x is less than three." . answer 0 . ] .
x is greater than 3.
x is less than three.
ans = 0
#+END_SRC

The =answer= operation sets the =/ans= slot to a value.  To demonstrate the above, I had to add it because otherwise the second and third argument to =if= would appear to be missing to the code because substatements evaluate to what they set the =/ans= slot to before the statement processes.

The =while= operation is a looping operation.  It takes two instructions for its argument.  It calls the first instruction without any arguments.  If the instruction sets the =/ans= slot to =True=, it then calls the second instruction without any arguments, and so on.  =while= calls both instructions in the current object so code in the instructions can modify the slots in the current object.

#+BEGIN_SRC slobil
... /i 1 .
... while ( lt-eq i 10 )
(
	print i .
  incr i .
) .
1
2
3
4
5
6
7
8
9
10
ans = False.
... print i .
10
#+END_SRC

The =repeat= operation executes an instruction a fixed number of times in the current object.  For example, the same loop could have been written as:

#+BEGIN_SRC slobil
... /i 1
... repeat 10 ( print i . incr i . ) .
1
2
3
4
5
6
7
8
9
10
#+END_SRC

The =repeat= loop is faster than the =while= loop when it is applicable because it does not need to check a condition.

*** Prototyping

SLOBIL is a prototyped-based object language.  New objects can inherit from other objects using the =new= operation.  When changes are made to the parent object, it propogates to all the children.  The =new= operation also adds to (or replaces) the slots included from their parent object in an analogous way to the =object= operation.

#+BEGIN_SRC slobil
... /+rectangle+ [ object /area ( mul l w ) ] .
... /rect1 [ new +rectangle+ /l 5 /w 4 ] .
... print rect1:/area .
(  mul l w  )
... set /d 2 +rectangle+ .
... set /area ( mul l w d ) +rectangle+ .
... print rect1:/area
(  mul l w d )
#+END_SRC

The =in= operation executes code inside a given object.  It can be used to do what other languages call "method calls".
#+BEGIN_SRC slobil
... in rect1 rect1:/area .
ans = 40
#+END_SRC

Without using =in=, calling =rect1:/area= will not reference the values at the =/l= and =/w= slot in the object at =/rect1=.
#+BEGIN_SRC slobil
... rect1:/area .
Error: Value at slot /l not found.
#+END_SRC

Calling instructions within an object is a common thing to do. So SLOBIL provides a convenience syntax. If the first element of a statement is an object, it calls the instruction at the slot provided in the first argument from within the object.
#+BEGIN_SRC slobil
... rect1 /area .
ans = 40
#+END_SRC 

The link between objects created by =new= is a link between the objects themselves, not the slots at which the objects are inserted.  If the parent object is moved, deleted, or the slot is overwritten with a new object, it will not change the children because the object is simply removed from the slot it was located in originally, the object itself has not changed. 
#+BEGIN_SRC slobil
... /+rectangle+ [ object /area ( mul w l ) ] .
... /rect1 [ new +rectangle+ /l 5 /w 4 ] .
... rect1 /area .
ans = 20
... move /+rectangle+ /x .
... rect1 /area .
ans = 20
... /+rectangle+ [ object /area ( add l w ) ] .
... rect1 /area .
ans = 20
... delete /x .
... rect1 /area .
ans = 20
#+END_SRC

*** Applying Instructions To Data In An Object

The =do= operation applies an operation to each slot in a set of objects.  For example:

#+BEGIN_SRC slobil
... do add [ object /x 2 /y 3 /z 4 ] [ object /x 5 /y 2 ] .
ans = an Object with:
x of type Integer, value: 7
y of type Integer, value: 5
#+END_SRC 

For each slot that has data in all the objects passed to =do= as arguments, =do= calls the operation in its first argument using the data from the given slot in each object as positional arguments, in the order the objects are given to =do=.

=do= takes operations as arguments, but programmers write instructions, not operations.  Instructions can be converted to operations by equipping their code with a fixed set of positional arguments using the =op= operation.

#+BEGIN_SRC slobil
... do [ op ( div [ sub y x ] x ) /x /y ]
[ object /x 2.0 /y 3.0 /z 4.0 ]
[ object /x 5.0 /y 2.0 ] .
ans = an Object with:
x of type Real, value: 1.500000
y of type Real, value: -0.333333
#+END_SRC

The =op= operation converts the instruction given into an operation by setting the slots in the temporary environment in which an instruction is called to the given positional arguments, e.g. in the above, the first argument will be inserted into the slot =/x= and the second argument to the slot =/y=.

*** Objects As Arrays

There is no /array/ type in SLOBIL.  Objects are used as array as well.  Several operations make use of a slot-naming convention to treat objects like arrays.  Slots that match the pattern =/name1=, =/name2=, ..., =/nameN= can be treated like an array by operations.

The =next= operation sets the =/ans= slot to the next slot given the current slot.
#+BEGIN_SRC slobil
... next /c1 .
ans = /c2
#+END_SRC

The =previous= operation sets the =/ans= slot to the previous slot given the current slot.
#+BEGIN_SRC slobil
... previous /c10 .
ans = /c9
#+END_SRC

The =last= operation sets the =/ans= slot to the last slot in an object that begins with the given prefix.

#+BEGIN_SRC slobil
... /array [ list 1 2 3 ] .
... print array .
an Object with:
t1 of type Integer, value: 1
t2 of type Integer, value: 2
t3 of type Integer, value: 3
... last array /t .
ans = /t3
#+END_SRC

This example demonstrates the =list= operation as well which creates a list-like object with data located at slots =/t1=, =/t2=, ..., =/tN=.

The =collapse= operation can be used to summarize a list.

#+BEGIN_SRC slobil
... /array [ list 3 -1 4 ] .
... collapse add array /t .
ans = 6
#+END_SRC

=collapse= applies an operation that takes two arguments to each element of the list consecutively.  So, in the above example, first =add 3 -1= is computed.  Then, =add ans 4= is computed, and so on.

=collapse= and =last= both operate on the =/t= prefix by default so the last argument can be omitted if that is the prefix desired,

*** Exceptions and Error Handling

=please= is the SLOBIL operation for handling errors.  It takes two arguments.  The first is an instruction to execute in the current object.  The second is an instruction to execute if the first instruction fails.

Note that errors will still be printed to the console unless you run =interpreter /print-errors False .= first.

*** Saving and Loading Objects

Objects can be saved with the =save= operation.  =save= saves the current object to the given filepath.
#+BEGIN_SRC slobil
... /test [ object /x 1 /y "hello" /z True ] .
... in test ( save "test.dslob" ) .
#+END_SRC

The =build= operation saves objects in a standard location, =~/.dslobs=.
#+BEGIN_SRC slobil
... build "test" test .
#+END_SRC

The above statement saves the object =test= to =~/.dslobs/test.dslob=.

Similarly, the =load= operation loads a given filepath into the current object, while the =use= operation imports an object from the standard location for save files, =~/.dslobs=.
#+BEGIN_SRC slobil
... load "test.dslob" .
... use "test" .
#+END_SRC

*** REPL Settings

The REPL itself has a few settings that can be configured using the =interpreter= operation.  The below example demonstrates how to change the various values from their defaults.
#+BEGIN_SRC slobil
  ... interpreter /print-ans True .
  ... interpreter /auto-rehash False .
  ... interpreter /print-errors False .
#+END_SRC

The =print-ans= setting indicates whether to print what the =/ans= slot is after running each command.  The default is not to do so.

The =auto-rehash= setting indicates whether objects --- which, internally, are hash tables --- should be automatically rehashed as they grow in size or whether the =rehash= operation should be used explicitly.  The default is to rehash automatically.

The =print-errors= setting indicates whether to print the trace of the error out when an error is encountered.  The default is to do so.

** Multi-threaded Programs


Tasks model processes.  They enable multi-threaded programming.  

The =task= operation creates a task.  The =task= operation takes three arguments.  The first gives the slot to assign the Task to.  The second gives the /body/ of the Task, an instruction that the Task will execute when it is run (Tasks do not immediately start running on creation).  The third argument is the initial state of the task, a object defining the environment in which the task will run.

#+BEGIN_SRC slobil
... task /my-task ( commands to run... ) [ object . ] .
#+END_SRC

The =run-task= operation starts a task.  It takes a single argument, the task to start running.  Running a task means that the instruction that forms the body of the task is executed.  Only one instance of the task can be running at a given time but the same task can be executed multiple times. The state of the task will not revert to its original state when it is run again.

The structure of a task is described in the below table:

   | Element | Description                                                                                              |
   |---------+----------------------------------------------------------------------------------------------------------|
   | Body    | The instruction run in a separate thread from the main SLOBIL thread.                                       |
   | State   | A Object that contains the current state of the task.  The object being modified by the Task's body. |
   | Queue   | A Object that contains data queued to pass from the main thread to the Task's thread or vice-versa.    |
   |---------+----------------------------------------------------------------------------------------------------------|

A Task's state object is entirely /separate/ from the current object.  There is no way to directly access data in a task except in the body of the task.  No data in the Task's queue can be accessed directly in any thread. Data can be sent between the main thread and the task thread using operations.

Tasks /accept/ data when they take data from their queue and move it into their state object.  They can do this with one of three operations: =accept=, =accept-or=, and =select=.

The =accept= operation takes a slot as an argument and waits for data to be available at that slot in the Task's queue.  A Task can be provided as an optional second argument to =accept= to look for the data in another task's queue. Once that data is available, it sets the =/ans= slot in the Task's state object to the value of the data.  =accept= is /blocking/ so no other code will be executed in the thread running the =accept= operation until the data is available in the queue.  SLOBIL does not allow running =accept= in the main task because there is no way to exit the blocking.  =accept-or= can be used instead.

The =queue= operation moves data from one object into the queue of another Task.  Its arguments are a slot to set in the queue object, the data to send, and the task's queue to access.

#+BEGIN_SRC slobil
... task /t1 ( print [ accept /hello ] . ) .
... run-task t1 .
... queue /hello "Hi!" t1 .
Hi!
#+END_SRC

Because the =accept= operation blocks the thread until the data is entered into the queue, it cannot be used when the data =accept= is looking for is optional.  

The =accept-or= operation checks whether data exists at a certain slot in the queue, if it does, it sets the =/ans= slot to the result.  If not, it executes its second argument, an instruction, in its state object.  This operation does not block.  It checks once if the data is available and otherwise executes the instruction.  For example, in a Task body, we might have:

#+BEGIN_SRC slobil
accept-or /hello ( set /hello "Hello." ) .
#+END_SRC

The main use of =accept-or= is to provide default values for missing data or to do something else if data is not available.

Alternatively, the =select= operation executes one of several instructions if data comes in at any number of slots.  =select= takes paired slots and instructions as its arguments.  It waits for data to appear in its queue at any of the slots listed.  The first slot to receive data is "selected".  The instruction associated with the slot is executed in the slot's state object after setting the =/ans= slot to the value of the data located at the slot in the queue.

#+BEGIN_SRC slobil
  ... task /t1 ( 
        set /continue True .
        while ( answer continue )
              (
                select /add-one ( print [ add ans 1 ] ) 
                       /sub-one ( print [ sub ans 1 ] )
                       /continue ( set /continue ans ) .
              ) .
      ) .
  ... run-task t1 .
  ... queue /add-one 3 t1 .
  4
    ... queue /sub-one 3 t1 .
  2
#+END_SRC

* Example Programs

** Accounting System

SLOBIL programs can use SLOBIL itself as their means of interacting with the user because the language is "command-like".  This section describes a simple double-entry accounting program written in SLOBIL.

Interactive programs are usually created as objects so they can be easily loaded into SLOBIL with both state variables and instructions.  So we start by defining the program object which will contain a list of accounts.  
#+BEGIN_SRC slobil
  /accounting
    [ object
        /account-list [ object ]
    ] .
#+END_SRC

Next, we define a generic account object and add it to =accounting=.  I use =+name+= as a naming convention for base objects that will be used as prototypes for subsequent objects.

#+BEGIN_SRC slobil
  /+account+
  [ object
      /add-entry
      (
        last entries /entry .
        next ans .
        set ans entry entries .

        incr balance entry:/amount .
      )
      /summary
      (
        print [ combine name ": " balance ] .
      )
      /print-entry
      (
        print [ combine
                  entry:/desc ": "
                  [
                    to-string entry:/amount
                  ]
              ] .
      )
      /print-entries
      (
        do [ op print-entry /entry ]
           entries ...
      )
  ]
  accounting .
#+END_SRC

To suppress printing out the =/ans= slot, you can end a statement with three periods =...=.

Now, we need an instruction for creating a new account.  We will have the user specify the account as a slot.
#+BEGIN_SRC slobil
  /new-account
  (
    set name
        [
          new +account+ /name [ to-string name ] /balance balance
              /entries [ object ] 
        ] account-list .
  )
  accounting .
#+END_SRC

This instruction might not seem to do much beyond what the =new= operation does.  One advantage of defining this instruction is that it will give an intelligible error if the user does not specify a name for the account and an opening balance.  The =new= operation doesn't expect any particular slots to be set, but the =new-account= instruction does.

We next need an instruction to transfer money between two accounts.  Let's define one.
#+BEGIN_SRC slobil
  /transfer
    (
      /to-entry [ object /desc desc /amount amount ] .
      /from-entry [ object /desc desc /amount [ mul -1 amount ] ] .

      if [ exist from-account account-list ]
         {
           account-list:from-account /add-entry /entry from-entry .
         }
         {
           if [ exist to-account account-list ]
              {
                account-list:to-account /add-entry /entry to-entry .
              } .
         } .
    )
    accounting .
#+END_SRC

Lastly, let's add some instructions to summarize our accounts and print out entries in a given account.

#+BEGIN_SRC slobil
  /summary
    (
      do [ op ( account /summary ) /account  ]
         account-list ...
    )
    accounting .

  /entries
    (
      account-list:account /print-entries .
    ) 
    accounting .
#+END_SRC

Let's see the program in action.  
#+BEGIN_SRC slobil
    ... accounting /new-account /name /Checking /balance 1000.50 .
    ... accounting /new-account /name /Savings /balance 20000.00 .
    ... accounting /transfer
    /desc "Saving Money"
    /amount 100
    /to-account /Savings
    /from-account /Checking .
  ...  accounting /summary .
  Savings: 20100.000000
  Checking: 900.500000
  ... accounting /entries /account /Checking .
  Saving Money: -100
#+END_SRC

The user shouldn't have to type =accounting= every time.  Temporarily, in the session, we can =import= it, but to package it for users, it is better to use the =build= operation to save the object to disk.

#+BEGIN_SRC slobil
... build "accounting" accounting .
#+END_SRC

Now, whenever we start a SLOBIL session, we can simply type:
#+BEGIN_SRC slobil
  ... use "accounting" .
  ... new-account /name /Checking /balance 1000.50 .
  ... summary .
  
#+END_SRC
	
** A Time-Keeping Program

I used this program to keep track of billable hours for about three years. It is certainly the most used SLOBIL program as of June 2023.

#+INCLUDE: "../examples/things.slob" src slobil


* Example Instructions
** Quicksort

   #+INCLUDE: "../examples/quicksort.slob" src slobil

   Example of use:

   #+BEGIN_SRC slobil
... set /x [ list 3 2 4 1 ] .
... quicksort /input x /slice /t /compare lt .
... print x .
ans = a object with:
t1 of type Integer, value: 1
t2 of type Integer, value: 2
t3 of type Integer, value: 3
t4 of type Integer, value: 4
... quicksort /input x /slice /t /compare gt .
... print x .
a object with:
t1 of type Integer, value: 4
t2 of type Integer, value: 3
t3 of type Integer, value: 2
t4 of type Integer, value: 1
   #+END_SRC

** A Line-Oriented Text Editor

   This example is a simple interactive program where the user enters commands to edit a buffer. 

   #+INCLUDE: "../examples/slobed.slob" src slobil

   Example of use:
   #+BEGIN_SRC slobil
... import slobed .
... i "Hello" .
... o .
Hello
... n .
... i "Goodbye" .
... o .
Goodbye
... p .
... o .
Hello
   #+END_SRC

** Numerical Differentiation

   #+INCLUDE: "../examples/deriv.slob" src slobil

   Example of use:
   #+BEGIN_SRC slobil
... set /f [ op ( power t 2 ) /t ] .
... deriv /f f /x 1.0
ans = 2.0
   #+END_SRC

** Compute Factorial

   #+INCLUDE: "../examples/factorial.slob" src slobil

   Example of use:
   #+BEGIN_SRC slobil
... factorial 5 .
ans = 120
... factorial-recurse /t 5 .
ans = 120
   #+END_SRC

*** Note on Recursion

Operations cannot be directly defined recursively, but Instructions can be.  That is why the code above first defines =-factorial-recurse= as an instruction and then creates the operation.

** Numerical Integration

   #+INCLUDE: "../examples/integrate.slob" src slobil

   Example of use:
   #+BEGIN_SRC slobil
... integrate /f [ op ( power t 2 ) /t ] /lb 0.0 /ub 1.0 /n 1000 .
ans = 0.332834
   #+END_SRC

** Basic Linear Algebra

   This example demonstrates both application methods like =do= and =collapse= as well as when to use operations for programmer code.  Operations make more sense when the arguments are all the same kind of thing, the order is the only thing that might matter, like in this example where we are multiplying two matrices.  Instructions are preferred when the argument's position is uninformative about the purpose of the argument, as in the previous example with numerical integration.

   #+INCLUDE: "../examples/matrix.slob" src slobil

   Example of use:
   #+BEGIN_SRC slobil
... set /A [ list [ list 1 2 ] [ list 3 4 ] ] .
... set /B [ list [ list 6 2 ] [ list 3 4 ] ] .
... transpose A .
ans = a object with:
t1 of type Object, value: a object with:
t1 of type Integer, value: 1
t2 of type Integer, value: 3
t2 of type Object, value: a object with:
t1 of type Integer, value: 2
t2 of type Integer, value: 4
... matrix-multiply A B .
ans = a object with:
t1 of type Object, value: a object with:
t1 of type Integer, value: 10
t2 of type Integer, value: 26
t2 of type Object, value: a object with:
t1 of type Integer, value: 11
t2 of type Integer, value: 25
   #+END_SRC

** Split a String

   #+INCLUDE: "../examples/tokenize.slob" src slobil

   Examples of use:
   #+BEGIN_SRC slobil
... tokenize /line "1,2,3" /sep "," .
ans = a object with:
t1 of type String, value: 1
t2 of type String, value: 2
t3 of type String, value: 3
   #+END_SRC


** Concurrent Programming

   SLOBIL uses Tasks to run Instructions in separate processes.  The following example demonstrates how =queue=, =accept=, and =select= work to move data between the main Task and other Tasks.

   #+INCLUDE: "../examples/task.slob" src slobil

   The following task that can be used to run any code in the background.  

   #+INCLUDE: "../examples/background.slob" src slobil

** Linking C code

   One of the big outstanding tasks with SLOBIL is to write a more user-friendly (and documented) /libslobil/ for adding extensions, but it is currently possible to write SLOBIL operations in C, using SLOBIL's =link= operation to import the code.

   The following is an example of C code.

   #+INCLUDE: "../examples/link.c" src c

   We then compile it into a shared object file, linking against =libslobil=.

   #+INCLUDE: "../examples/link_compile.sh" src sh

   The code then can be loaded into SLOBIL with the =link= operation like so:

   #+INCLUDE: "../examples/link.slob" src slobil

   The first argument of =link= gives the shared-object file name.  The second argument gives the name of the function.  The third argument gives what the name of the SLOBIL operation will be.

   Now, the operation can be called in the following way:
   #+BEGIN_SRC slobil
... log1 1 .
ans = 0.693147
   #+END_SRC
   
* Reference

  This section gives the full vocabulary of the language.  The grammar of the language is described in the previous sections.  I describe each type of data, and the operations associated with it. 

  Throughout, I enclose an operation's optional arguments between bars (||). 

** Objects

*** Short description

    A object contains data located at slots.  Data can be retrieved  from and inserted into objects.  Objects also defined the /scope/ of SLOBIL code because code is executed inside objects.  So the values of variables depend on which object you are executing the code.  This allows the user to flexibly manipulate scope.

*** Implementation details

    Objects are hash tables.  The keys to the table are called slots.  The number of bins in the hash table grows as more elements are added.  This keeps lookup times low, but the object will rehash as it grows.  Rehashing can be turned off by using the =auto-rehash= operation.

*** Object operations

**** Creation

***** =object=

Usage: =object SLOT1 VALUE1 SLOT2 VALUE2 ...=

Sets the =/ans= slot to a object with =VALUE1= located at =SLOT1= and so on.

***** =list=

Usage: =list VALUE1 VALUE2 ...=

Set the =/ans= slot to a Object with =VALUE1= at Slot =/t1=, =VALUE2= at Slot =/t2=, and so on.


***** =range=

Usage: =range INTEGER1 INTEGER2 |INTEGER3|=

Set the =/ans= slot to a Object with =INTEGER1= at =/t1= and =INTEGER1 + INTEGER3= at =/t2= and so on so long as the value is less than or equal to =INTEGER2=.


**** Insert, move, and remove data to and from slots

***** =set=

Usage: =set SLOT VALUE |OBJECT|=

Sets the value at =SLOT= to =VALUE= in the object =OBJECT=.  If the =OBJECT= argument is omitted, then it will set the slot in the current object.

***** =move=

Usage: =move SLOT1 SLOT2=

Move the value located at =SLOT1= to =SLOT2=.  Does not copy the data so it is an efficient way to move data.

***** =delete=

Usage: =delete SLOT=

Delete the value at =SLOT= in the current object.

**** Access data in Object

***** =get=

Usage: =get SLOT |OBJECT|=

Sets the =/ans= slot to the value located at =SLOT= in =OBJECT=.  If the =OBJECT= argument is not specified, get from the current object.

***** =exist=

Usage: =exist SLOT |OBJECT|=

Set the =/ans= slot to =True= if a value exists at the =SLOT= in =OBJECT=.  If the =OBJECT= argument is omitted, check in the current object.

***** =import=

Usage: =import OBJECT=

Set the Slots in the current Object to hold the same values that they hold in =OBJECT=.

***** =filter=

Usage: =filter OBJECT OPERATION=

Set the =/ans= slot to a Object containing all the elements in =OBJECT= such that the =OPERATION= applied to the element of the Object sets the =/ans= slot to =True=.

**** Apply Operations to elements of a Object

***** =do=
Usage: =do OPERATION OBJECT1 OBJECT2 ... OBJECTN=

Execute =OPERATION= which takes its arguments (1...N) from each element in =OBJECT1=, ..., =OBJECTN=.  Sets the =/ans= slot to a Object which contains whatever the =OPERATION= evaluates to at the corresponding Slots.  For example, =do add [ list 1 2 3 . ] [ list 4 5 6 . ]= sets the =/ans= slot to a Object with elements (5,7,9) at slots =(/t1,/t2,/t3)=.  =do= will only return results at Slots that exist in all Objects.  So, for example, =do add [ list 1 2 3 . ] [ list 4 5 . ]= sets the =/ans= Slot to =list 5 7=.

***** =collapse=

Usage: =collapse OPERATION OBJECT |SLOT|=

Sets the =/ans= slot to the value of applying =OPERATION= to the value in the =OBJECT= at Slot =/SLOT1= and =/SLOT2= and then again to the result of that and to the value of  =/SLOT3= and so on. For example, =collapse add [ list 1 2 3 . ] /t= sets the =/ans= slot to =6=.  If the =SLOT= argument is omitted, it is assumed to be =/t=.

**** Execute code in a object

***** =in=

Usage: =in OBJECT INSTRUCTION=

Call =INSTRUCTION= in =OBJECT=.

***** =up=

Usage: =up STATEMENT=

Execute STATEMENT in the object above the current one after resolving the values of the arguments of the statement in the current object.  For example, we can create an Instruction that can be used to increment a variable in place, like so: 
       #+BEGIN_SRC slobil
       ... set /inc ( up set x [ add 1 [ up get x . ] . ] . ) .
       ... set /x 1 . 
       ... inc /x /x . 
       ... print x .
       2
       #+END_SRC

**** Test if a object

***** =is-object=
Usage: =is-object VALUE=

Sets the =/ans= Slot to =True= if =VALUE= is a Object and to =False= otherwise.

**** Technical

***** =rehash=
Usage: =rehash OBJECT=

Manually rehash the object's underlying hash table.


** Reals and Integers

*** Short description
    Real and Integer are distinct types in SLOBIL.  A Real is a number with a decimal point.  An Integer is a number without a decimal point. Sometimes either type can be used for an operation.  In this case, I refer to the argument type as a Number in describing the operation for brevity.  Number is /not/ a SLOBIL type.

*** Implementation details

    A Real is a double-precision floating point value (equivalent to C's double).

    An Integer is an arbitrarily long integer (a "bignum").  Integers are implemented using GnuMP.

*** Real and Integer operations
**** Arithmetic operations
***** =add=

Usage: =add NUMBER1 NUMBER2 ...=

Adds all the numbers together and sets the =/ans= slot to the result.

***** =mul=

Usage: =mul NUMBER1 NUMBER2 ...=

Multiplies all the numbers together and sets the =/ans= slot to the result.

***** =sub=

Usage: =sub NUMBER1 NUMBER2 ...=

Subtracts the second number from the first and the third number from that and so on and sets the =/ans= slot to the result.

***** =div=

Usage: =div NUMBER1 NUMBER2 ...=

Divides the first number by the second, the result by the third number, and so on and sets the =/ans= slot to the result.

***** =mod=

Usage: =mod NUMBER1 NUMBER2=

Return the remainder of dividing the first number by the second.

***** =incr=

Usage: =incr INTEGER1 |INTEGER2|=

Increment =INTEGER1= by =INTEGER2= or by 1 if INTEGER2 is omitted.  The difference between this operation and =add= is that it modifies =INTEGER1= in place.  =INTEGER2= can be a negative number.


**** Comparison operations

***** =gt=

Usage: =gt NUMBER1 NUMBER2=

Set the =/ans= slot to =True= if =NUMBER1= is greater than =NUMBER2= and to =False= otherwise.

***** =lt=

Usage: =lt NUMBER1 NUMBER2=

Set the =/ans= slot to =True= if =NUMBER1= is less than =NUMBER2= and to =False= otherwise.

***** =eq=

Usage: =eq NUMBER1 NUMBER2=

Set the =/ans= slot to =True= if =NUMBER1= is equal to =NUMBER2= and to =False= otherwise.

***** =lt-eq=

Usage: =lt-eq NUMBER1 NUMBER2= --- set the =/ans= slot to =True= if =NUMBER1= is less than or equal to =NUMBER2= and to =False= otherwise.

***** =gt-eq=

Usage: =gt-eq NUMBER1 NUMBER2=

Set the =/ans= slot to =True= if =NUMBER1= is greater than or equal to =NUMBER2= and to =False= otherwise.

**** Conversion operations

***** =to-number=
Usage: =to-number STRING|SLOT=

If the argument is a String, try to convert to a number and set the =/ans= Slot to the result.  If the argument is a Slot and ends in a number, set the =/ans= Slot to the result.

***** =to-real=
Usage: =to-real INTEGER=

Set the =/ans= Slot to a Real representing the =INTEGER=.

**** Test if type operations

***** =is-integer=

Usage: =is-integer VALUE=

Sets the =/ans= Slot to =True= if the =Value= is an Integer and to =False= otherwise.

***** =is-real=

Usage: =is-real VALUE=

Sets the =/ans= Slot to =True= if the =Value= is a Real and to =False= otherwise.

**** Common mathematical operations

***** =log=
Usage: =log NUMBER=

Set the =/ans= Slot to the natural logarithm of =NUMBER=.

***** =exp=
Usage: =exp NUMBER=

Set the =/ans= Slot to the =NUMBER= power of the natural base.

***** =power=
Usage: =power NUMBER1 NUMBER2=

Set the =/ans= Slot to =NUMBER1= raised to the =NUMBER2= power.

***** =floor=
Usage: =floor REAL1=

Set the =/ans= Slot to the greatest Integer less than =REAL1=.

***** =ceiling=
Usage: =ceiling REAL1=

Set the =/ans= Slot to smallest Integer greater than =REAL1=.


** Strings

*** Short description

    Strings in SLOBIL are text.  A string literal is enclosed in quotation marks.  SLOBIL supports UTF-8 encodings. Non-ASCII characters are handled correctly: a single character is a single character no matter how many bytes it is. It also implements a collection of escape sequences for whitespace and quotation marks that should be included in the string itself.

    The escape sequences are:

    | Escape Sequence  | Meaning          |
    |------------------+------------------|
    | \\               | \                |
    | \'               | ' (single-quote) |
    | \t               | tab              |
    | \n               | newline          |
    | \r               | carriage return  |
    | ' (single-quote) | " (double quote) |
    |------------------+------------------|

*** Implementation details

    Strings are internally UTF-32 encoded to enable faster access by index number and because it makes creating substrings faster.  SLOBIL accepts UTF-8 as input because that is more common in terminals and in file-encodings.

*** String operations
**** Access, search, and modify string elements
***** =substring=
Usage: =substring STRING INTEGER1 INTEGER2=

Sets the =/ans= Slot to the subset of =STRING= where the characters included are determined by =INTEGER1= and =INTEGER2=.  Strings are 1-indexed in SLOBIL so the first character is at location 1.  If the =INTEGER= is less than or equal to 0, determine the location from the end of the String.  So if =INTEGER1= and =INTEGER2= are =0=, then it will set the =/ans= slot to the last character in =STRING=.

***** =match=
Usage: =match STRING1 STRING2 |INTEGER|=

Find occurences of regular expression =STRING1= in String =STRING2=.  Sets the =/ans= Slot to a Object with all submatches located at the =/tN= objects.  The optional third argument gives the number of matches to return.  If =0= is provided, return all matches (default).

***** =replace=
Usage: =replace STRING1 STRING2 STRING3 |INTEGER|=

Set the =/ans= Slot to a String formed by replacing all occurences of regular expression =STRING1= with =STRING2= in =STRING3=.  The optional fourth argument gives the number of matches to replace.  If =0=, replace all (default).

**** String properties

***** =length=
Usage: =length STRING=

Sets the =/ans= slot to the number of characters in =STRING=.

**** String comparison

***** =string-eq=
Usage: =string-eq STRING1 STRING2=

Sets the =/ans= Slot to =True= if the two strings are equal and to =False= otherwise.

***** =string-lt=
Usage: =string-lt STRING1 STRING2=

Sets the =/ans= Slot to =True= if =STRING1= is less than =STRING2= in the sense that the ASCII characters have lower values.

***** =string-gt=
Usage: =string-gt STRING1 STRING2=

Sets the =/ans= Slot to =True= if =STRING1= is greater than =STRING2= in the sense that the ASCII characters have lower values.

***** =char-eq=
Usage: =char-eq STRING1 INTEGER STRING2=

Test if character =INTEGER= of string (using same index numbers as for =substring=) is equal to =STRING2=.  This is a slight performance improvement over testing whether the =substring= with only one character is equal to the string.

**** Combine strings

***** =combine=
Usage: =combine STRING1 STRING2 ... STRINGN=

Sets the =/ans= slot to the concatenation of the two Strings so that the resulting String is ="STRING1STRING2"=.

**** Convert to string

***** =to-string=
Usage: =to-string INTEGER|REAL|SLOT |INTEGER2|=

Sets the =/ans= Slot to a String representing the =INTEGER= or =REAL= or =SLOT= provided as the first argument.  The second argument is used if a =REAL= argument is provided.  =INTEGER2= gives the number of elements after the decimal point to include.  If not provided, 6 decimal places are included.

**** Test if string

***** =is-string=
Usage: =is-string VALUE=

Sets the =/ans= Slot to =True= if the =VALUE= is a String and to =False= otherwise.

**** Strings from User Input

***** =input=
Usage: =input SLOT=

Reads a line of text the user enters and sets =SLOT= to that value (always a String).

** Slots

*** Short description

    Slots are a type of data in SLOBIL usually used to refer to locations in slots.  More generally, they are symbols.  They can be compared with one another and modified.  Slots are not "associated" with objects.  They are data without any associated context.

*** Implementation details

    Slots are a structure containing the name of the object and the hashed value of the name so they can be easily inserted into the object hash table.  
    
*** Slot operations

**** Operations on "list" slots

***** =next=
Usage: =next SLOT=

If the =SLOT= ends in a number, return the Slot with that number incremented by 1.

***** =previous=
Usage: =previous SLOT=

If the =SLOT= ends in a number, return the Slot with that number minus 1.  If that would cause the number to be less than 1 set the =/ans= Slot to the "first" slot with that prefix so that =previous /t1 .= sets =/ans= to =/t1=.

***** =last=
Usage: =last OBJECT SLOT=

Return the last Slot in the =OBJECT= that starts with =SLOT=.  So that if you had slots =/x0=, =/x1=, and =/x2= in the Object, =last OBJECT /x= would return =/x2=.

**** Convert to slot

***** =to-slot=
Usage: =to-slot STRING|INTEGER=

Sets the =/ans= slot to a Slot named =STRING= or to =/tINTEGER=.

**** Slot comparison

***** =slot-eq=
Usage: =slot-eq SLOT1 SLOT2=

Sets the =/ans= Slot to =True= if the two Slots are the same and to =False= otherwise.

**** Test if a slot

***** =is-slot=
Usage: =is-slot VALUE=

Sets the =/ans= Slot to =True= if the =VALUE= is a Slot and to =False= otherwise.


** Booleans

*** Short description

    Booleans can take on two values: =True= or =False=.  Comparison and testing operations usually set the =/ans= slot to a Boolean value.

*** Implementation details

    Booleans are simply a binary value.  They use the C99 bool type internally.
    
*** Boolean operations

**** =is-boolean=
Usage: =is-boolean VALUE=

Sets the =/ans= Slot to =True= if the =VALUE= is a Boolean and to =False= otherwise.

**** =and=
Usage: =and BOOLEAN1 BOOLEAN2=

Sets the =/ans= Slot to =True= if BOOLEAN1 and BOOLEAN2 are =True= and to =False= otherwise.

**** =or=
Usage: =or BOOLEAN1 BOOLEAN2=

Sets the =/ans= Slot to =True= if either BOOLEAN1 or BOOLEAN2 are =True= and to =False= otherwise.

**** =not=
Usage: =not BOOLEAN=

Sets the =/ans= Slot to =True= if BOOLEAN is =False= and to =False= otherwise.

** Instructions

*** Short description

    Instructions are code objects which have not yet been executed.  They can be called or executed in different objects.

*** Implementation details

    Instructions are internally "compiled" code.  They are then supplied with an environment (a object) before they are executed.  The compiled code object is a linked list of statements each of which is a linked list of elements.  Elements are either literal data values or the names of slots to lookup in the environment.

*** Instruction operations

**** =call=
Usage: =call INSTRUCTION SLOT1 VALUE1 SLOT2 VALUE2 ...=

Executes =INSTRUCTION= in a Object with =SLOT1= assigned to =VALUE1= and so on.

**** =is-instruction=
Usage: =is-instruction VALUE=

Sets the =/ans= Slot to =True= if the =VALUE= is an Instruction and to =False= otherwise.

**** =op=
Usage: =op INSTRUCTION SLOT1 ... SLOTN=

Set the =/ans= slot to an operation that calls =INSTRUCTION= after binding =SLOT1= to the first argument, and so on.

**** =code=
Usage: =code INSTRUCTION=

Sets the =/ans= slot to a String containing the code for the =INSTRUCTION=.

**** =is-operation=
Usage: =is-operation VALUE=

Sets the =/ans= Slot to =True= if the =VALUE= is an Operation and to =False= otherwise.

**** =set-help=
Usage: =set-help INSTRUCTION STRING=

Sets the help for =INSTRUCTION= to =STRING=.

**** =help=
Usage: =help INSTRUCTION=

Print the help string.

** Files

*** Short description

    Files are stream objects that you can write to and read from.

*** Implementation details

    Files are like the C FILE type.  

*** File operations

**** =is-file=
Usage: =is-file VALUE=

Sets the =/ans= Slot to =True= if the =VALUE= is a File and to =False= otherwise.

**** =open-file=
Usage: =open-file STRING1 |STRING2|=

Sets the =/ans= Slot to a File object corresponding to the file named =STRING1= with mode =STRING2= (default: "r+").

**** =read=
Usage: =read FILE=

Read a byte from a file and set the =/ans= slot to the result (an Integer).

**** =read-char=
Usage: =read-char FILE=

Read a single character from a File object and set the =/ans= Slot to that character (a String).

**** =read-line=
Usage: =read-line FILE=

Sets the =/ans= Slot to the next line from FILE.

**** =write=
Usage: =write INTEGER FILE=

=Integer= must be in [0,255].  Directly writes a byte to =FILE=.

**** =write-string=
Usage: =write-string STRING FILE=

Write a =STRING= to =FILE= using UTF-8 encoding. 

**** =close=
Usage: =close SLOT=

If a File object is located at =SLOT=, close the File and remove its reference from the =SLOT=.

** Nothing 

*** Short description

    =Nothing= is a value that is not any other value and is a different type than any other value.

*** Nothing operations

**** =is-nothing=
Usage: =is-nothing VALUE=

Sets the =/ans= slot to =True= if the value is =Nothing= and to =False= otherwise.

** Task Operations

*** Short description

    Tasks are objects that allow you to execute code in another thread and share data between threads.

*** Implementation details

    Tasks contain three elements:

    1. A Body, an instruction that is executed when the Task is run.
    2. A State, a object that contains the state of the Task.  The Body is run inside the State object. It is persistent across Task runs.
    3. A Queue, a object that cannot be reached directly but which facilitates data sharing across tasks without worrying about race conditions or other details.

    Tasks use mutexes to ensure data is transferred correctly between threads.

*** Task operations

**** =task=
Usage: =task SLOT INSTRUCTION |OBJECT|=

Sets =SLOT= to contain a new Task with its Body given by the =INSTRUCTION= and the initial state being set to =OBJECT=.  If no =OBJECT= argument is given, the initial state is a object containing only the basic operations (the object always contains the basic operations even if they are not in the initial object passed to =Task=).

**** =run-task=
Usage: =run-task TASK=

Executes the Task's Body in a separate thread.  The same Task object cannot be running in two threads.  The operation will give an Error if it is already running.

**** =queue=
Usage: =queue SLOT DATA |TASK|=

Sets the =SLOT= in the Queue of =TASK= to value =DATA=.  If the =TASK= argument is omitted, it is assumed to be set in the queue of the current task (for sharing Task data with another thread).  =queue= cannot be used for the main SLOBIL Task.

**** =accept=
Usage: =accept SLOT |TASK|=

Waits until =SLOT= has a value in =TASK='s Queue.  Once it finds a value, set the =/ans= slot to that value.  If =TASK= is omitted, wait for the current Task's Queue to be set.

**** =select=
Usage: =select SLOT1 INSTRUCTION1 SLOT2 INSTRUCTION2 ... SLOTN INSTRUCTIONN=

Waits for the Queue in the current task to contain data at any of the Slots (it will prefer earlier Slots if data is available at both).  Once it receives data, it sets the =/ans= slot to the data and executes the Instruction in the current object.

**** =accept-or=
Usage: =accept-or SLOT INSTRUCTION |TASK|=

Checks if =SLOT= is set in =TASK='s Queue.  If it is, the =/ans= slot is set to the result. If it is not, it executes =INSTRUCTION=. If =TASK= is omitted, search in the current =TASK='s Queue.

** Control flow operations

*** =if=
Usage: =if BOOLEAN VALUE1 |VALUE2|=

If the first argument is =True=, sets the =/ans= slot to =VALUE1=, if it is =False=, sets the =/ans= slot to =VALUE2=.  If =VALUE2= is omitted, do nothing if the first argument is =False=.

*** =while=
Usage: =while INSTRUCTION1 INSTRUCTION2=

Call =INSTRUCTION1= in the current Object. If it sets its =/ans= slot to =True=, call =INSTRUCTION2=.  Repeat.

*** =repeat=
Usage: =repeat INTEGER INSTRUCTION=

Call =INSTRUCTION= =INTEGER= times.

*** =please=
Usage: =please INSTRUCTION1 INSTRUCTION2=

Call =INSTRUCTION1=.  If there is an error, then call =INSTRUCTION2=.

** Environment operations

*** Modify the /ans slot

**** =answer=
Usage: =answer VALUE=

Set the =/ans= slot to =VALUE=.

**** =sit=
Usage: =sit=

Do nothing but lookup all arguments (causes Expressions --- instructions in curly brackets --- to be executed).

*** Exit SLOBIL

**** =exit=
Usage: =exit=

Exit SLOBIL.

*** Print output

**** =print=
Usage: =print VALUE |BOOLEAN|=

Prints =VALUE= to screen.  If =BOOLEAN= is =False=, then omit the newline (default: add newline after printing value).
      
*** Input and output files and state

**** =source=
Usage: =source STRING=

Executes SLOBIL code in the file named by STRING.

**** =save=
Usage: =save FILENAME=

Save the contents of the current object to file.

**** =load=
Usage: =load FILENAME=

Load the contents of a saved file into the environment.

**** =output-code=
Usage: =output-code STRING=

Outputs the code that has been entered at the prompt so far to the file named STRING.

**** =clear-code=
Usage: =clear-code=

Clear code that has been entered so far so that the code that =output-code= outputs will be empty.


*** Error handling

**** =error=
Usage: =error STRING |INTEGER|=

Outputs error message String and sets an error code INTEGER (if specified, otherwise, the error number is =1=).

**** =is-error=
Usage: =is-error INSTRUCTION=

Sets the =/ans= Slot to =True= if there was an error executing the =INSTRUCTION= and to =False= otherwise.

**** =ignore-errors=
Usage: =ignore-errors INSTRUCTION=

Ignore any errors while executing the instruction, i.e. go to the next statement if one statement errors.

*** Version

**** =version=
Usage: =version=

Sets the =/ans= Slot to a String giving the version of SLOBIL.

** System operations
*** Interacting with the shell
**** =shell=
Usage: =shell STRING=

Execute the shell command =STRING=.
**** =change-dir=
Usage: =change-dir STRING=

Change directory to the location given in =STRING=.
**** =current-dir=
Usage: =current-dir=

Set the =/ans= Slot to a String giving the current directory.

*** Time

**** =clock=
Usage: =clock=

Set the =/ans= slot to the current time in milliseconds from January 1, 1970.

**** =make-time=
Usage: =make-time INTEGER=

Given a clock value in milliseconds (as returned by =clock=) return a object with elements =second= (a number of seconds between 0-59), =minute= (giving a number between 0-59), =hour= (a number between 0-23), =day= (giving a number between 1-31),

**** =make-clock=
Usage: =make-clock OBJECT=

Make a clock value in milliseconds from a object describing the time (like the object returned by =make-time=)

*** Random numbers

**** =rand=
Usage: =rand |INTEGER|=

Set the =/ans= Slot to a uniformly distributed random Real between 0 and 1.  If =INTEGER= is provided, set the seed to the =INTEGER= before drawing random value.

** Package operations

*** =use=
Usage: =use STRING=

Load a saved object in =~/.dslobs/= with the extension =.dslob= into the current object. The file being loaded is: =~/.dslobs/STRING.dslob=.

*** =build=
Usage: =build STRING OBJECT=

Saves contents of object to =~/.dslobs/STRING.dslob= so that it can be loaded as a package.

*** =link=
Usage: =link STRING1 STRING2 STRING3=

Loads shared object file =STRING1= and its function named =STRING2= into SLOBIL operation named =STRING3=.  

** Interpreter options

*** Operation

**** =interpreter=
Usage: =interpreter SLOT VALUE=

Sets interpreter option =SLOT= to =VALUE=.

*** List of options

**** =print-ans=
Usage: =/print-ans=

If =True=, then print the value of the =/ans= Slot at the end of commands, if =False= (default) or any other non-Boolean value, suppress printing.

**** =auto-rehash=
Usage: =/auto-rehash=

If =True= (default) or any non-Boolean value, then rehash objects automatically as they grow in size.  If =False= do not rehash automatically.

**** =print-errors=
Usage: =/print-errors=

If =True= (default) or any non-Boolean value, then print error descriptions.  if =False=, do not print error descriptions.

* Saved Objects


  *Note*: When saving, only "permanent" data is written to disk.  For example, operations written in C will not be written to disk because these are linked in at run time.  File values will also not be written to disk because the file stream would need to be re-opened after restarting SLOBIL in any case; it has no permanent information.  All other data types are written to disk.

  This section will describe the storage format for SLOBIL saved files.  A user or programmer will never need to know the internal structure of the save file, but it will be provided here to have complete documentation and to perhaps be useful to people writing a C extension to SLOBIL.

* GNU Free Documentation License

  #+BEGIN_EXPORT html

  <h3 style="text-align: center;">GNU Free Documentation License</h3>

  <p style="text-align: center;">Version 1.3, 3 November 2008</p>

  <p> Copyright &copy; 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
       &lt;<a href="https://fsf.org/">https://fsf.org/</a>&gt;
   </p><p>Everyone is permitted to copy and distribute verbatim copies
   of this license document, but changing it is not allowed.</p>

  <h4><a name="section0"></a>0. PREAMBLE</h4>

  <p>The purpose of this License is to make a manual, textbook, or other
  functional and useful document &quot;free&quot; in the sense of freedom: to
  assure everyone the effective freedom to copy and redistribute it,
  with or without modifying it, either commercially or noncommercially.
  Secondarily, this License preserves for the author and publisher a way
  to get credit for their work, while not being considered responsible
  for modifications made by others.</p>

  <p>This License is a kind of &quot;copyleft&quot;, which means that derivative
  works of the document must themselves be free in the same sense.  It
  complements the GNU General Public License, which is a copyleft
  license designed for free software.</p>

  <p>We have designed this License in order to use it for manuals for free
  software, because free software needs free documentation: a free
  program should come with manuals providing the same freedoms that the
  software does.  But this License is not limited to software manuals;
  it can be used for any textual work, regardless of subject matter or
  whether it is published as a printed book.  We recommend this License
  principally for works whose purpose is instruction or reference.</p>

  <h4><a name="section1"></a>1. APPLICABILITY AND DEFINITIONS</h4>

  <p>This License applies to any manual or other work, in any medium, that
  contains a notice placed by the copyright holder saying it can be
  distributed under the terms of this License.  Such a notice grants a
  world-wide, royalty-free license, unlimited in duration, to use that
  work under the conditions stated herein.  The &quot;Document&quot;, below,
  refers to any such manual or work.  Any member of the public is a
  licensee, and is addressed as &quot;you&quot;.  You accept the license if you
  copy, modify or distribute the work in a way requiring permission
  under copyright law.</p>

  <p>A &quot;Modified Version&quot; of the Document means any work containing the
  Document or a portion of it, either copied verbatim, or with
  modifications and/or translated into another language.</p>

  <p>A &quot;Secondary Section&quot; is a named appendix or a front-matter section of
  the Document that deals exclusively with the relationship of the
  publishers or authors of the Document to the Document's overall
  subject (or to related matters) and contains nothing that could fall
  directly within that overall subject.  (Thus, if the Document is in
  part a textbook of mathematics, a Secondary Section may not explain
  any mathematics.)  The relationship could be a matter of historical
  connection with the subject or with related matters, or of legal,
  commercial, philosophical, ethical or political position regarding
  them.</p>

  <p>The &quot;Invariant Sections&quot; are certain Secondary Sections whose titles
  are designated, as being those of Invariant Sections, in the notice
  that says that the Document is released under this License.  If a
  section does not fit the above definition of Secondary then it is not
  allowed to be designated as Invariant.  The Document may contain zero
  Invariant Sections.  If the Document does not identify any Invariant
  Sections then there are none.</p>

  <p>The &quot;Cover Texts&quot; are certain short passages of text that are listed,
  as Front-Cover Texts or Back-Cover Texts, in the notice that says that
  the Document is released under this License.  A Front-Cover Text may
  be at most 5 words, and a Back-Cover Text may be at most 25 words.</p>

  <p>A &quot;Transparent&quot; copy of the Document means a machine-readable copy,
  represented in a format whose specification is available to the
  general public, that is suitable for revising the document
  straightforwardly with generic text editors or (for images composed of
  pixels) generic paint programs or (for drawings) some widely available
  drawing editor, and that is suitable for input to text formatters or
  for automatic translation to a variety of formats suitable for input
  to text formatters.  A copy made in an otherwise Transparent file
  format whose markup, or absence of markup, has been arranged to thwart
  or discourage subsequent modification by readers is not Transparent.
  An image format is not Transparent if used for any substantial amount
  of text.  A copy that is not &quot;Transparent&quot; is called &quot;Opaque&quot;.</p>

  <p>Examples of suitable formats for Transparent copies include plain
  ASCII without markup, Texinfo input format, LaTeX input format, SGML
  or XML using a publicly available DTD, and standard-conforming simple
  HTML, PostScript or PDF designed for human modification.  Examples of
  transparent image formats include PNG, XCF and JPG.  Opaque formats
  include proprietary formats that can be read and edited only by
  proprietary word processors, SGML or XML for which the DTD and/or
  processing tools are not generally available, and the
  machine-generated HTML, PostScript or PDF produced by some word
  processors for output purposes only.</p>

  <p>The &quot;Title Page&quot; means, for a printed book, the title page itself,
  plus such following pages as are needed to hold, legibly, the material
  this License requires to appear in the title page.  For works in
  formats which do not have any title page as such, &quot;Title Page&quot; means
  the text near the most prominent appearance of the work's title,
  preceding the beginning of the body of the text.</p>

  <p>The &quot;publisher&quot; means any person or entity that distributes copies of
  the Document to the public.</p>

  <p>A section &quot;Entitled XYZ&quot; means a named subunit of the Document whose
  title either is precisely XYZ or contains XYZ in parentheses following
  text that translates XYZ in another language.  (Here XYZ stands for a
  specific section name mentioned below, such as &quot;Acknowledgements&quot;,
  &quot;Dedications&quot;, &quot;Endorsements&quot;, or &quot;History&quot;.)  To &quot;Preserve the Title&quot;
  of such a section when you modify the Document means that it remains a
  section &quot;Entitled XYZ&quot; according to this definition.</p>

  <p>The Document may include Warranty Disclaimers next to the notice which
  states that this License applies to the Document.  These Warranty
  Disclaimers are considered to be included by reference in this
  License, but only as regards disclaiming warranties: any other
  implication that these Warranty Disclaimers may have is void and has
  no effect on the meaning of this License.</p>

  <h4><a name="section2"></a>2. VERBATIM COPYING</h4>

  <p>You may copy and distribute the Document in any medium, either
  commercially or noncommercially, provided that this License, the
  copyright notices, and the license notice saying this License applies
  to the Document are reproduced in all copies, and that you add no
  other conditions whatsoever to those of this License.  You may not use
  technical measures to obstruct or control the reading or further
  copying of the copies you make or distribute.  However, you may accept
  compensation in exchange for copies.  If you distribute a large enough
  number of copies you must also follow the conditions in section 3.</p>

  <p>You may also lend copies, under the same conditions stated above, and
  you may publicly display copies.</p>

  <h4><a name="section3"></a>3. COPYING IN QUANTITY</h4>

  <p>If you publish printed copies (or copies in media that commonly have
  printed covers) of the Document, numbering more than 100, and the
  Document's license notice requires Cover Texts, you must enclose the
  copies in covers that carry, clearly and legibly, all these Cover
  Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
  the back cover.  Both covers must also clearly and legibly identify
  you as the publisher of these copies.  The front cover must present
  the full title with all words of the title equally prominent and
  visible.  You may add other material on the covers in addition.
  Copying with changes limited to the covers, as long as they preserve
  the title of the Document and satisfy these conditions, can be treated
  as verbatim copying in other respects.</p>

  <p>If the required texts for either cover are too voluminous to fit
  legibly, you should put the first ones listed (as many as fit
  reasonably) on the actual cover, and continue the rest onto adjacent
  pages.</p>

  <p>If you publish or distribute Opaque copies of the Document numbering
  more than 100, you must either include a machine-readable Transparent
  copy along with each Opaque copy, or state in or with each Opaque copy
  a computer-network location from which the general network-using
  public has access to download using public-standard network protocols
  a complete Transparent copy of the Document, free of added material.
  If you use the latter option, you must take reasonably prudent steps,
  when you begin distribution of Opaque copies in quantity, to ensure
  that this Transparent copy will remain thus accessible at the stated
  location until at least one year after the last time you distribute an
  Opaque copy (directly or through your agents or retailers) of that
  edition to the public.</p>

  <p>It is requested, but not required, that you contact the authors of the
  Document well before redistributing any large number of copies, to
  give them a chance to provide you with an updated version of the
  Document.</p>

  <h4><a name="section4"></a>4. MODIFICATIONS</h4>

  <p>You may copy and distribute a Modified Version of the Document under
  the conditions of sections 2 and 3 above, provided that you release
  the Modified Version under precisely this License, with the Modified
  Version filling the role of the Document, thus licensing distribution
  and modification of the Modified Version to whoever possesses a copy
  of it.  In addition, you must do these things in the Modified Version:</p>

  <ul>


  <li>A. Use in the Title Page (and on the covers, if any) a title distinct
     from that of the Document, and from those of previous versions
     (which should, if there were any, be listed in the History section
     of the Document).  You may use the same title as a previous version
     if the original publisher of that version gives permission.
  </li>

  <li>B. List on the Title Page, as authors, one or more persons or entities
     responsible for authorship of the modifications in the Modified
     Version, together with at least five of the principal authors of the
     Document (all of its principal authors, if it has fewer than five),
     unless they release you from this requirement.
  </li>

  <li>C. State on the Title page the name of the publisher of the
     Modified Version, as the publisher.
  </li>

  <li>D. Preserve all the copyright notices of the Document.
  </li>

  <li>E. Add an appropriate copyright notice for your modifications
     adjacent to the other copyright notices.
  </li>

  <li>F. Include, immediately after the copyright notices, a license notice
     giving the public permission to use the Modified Version under the
     terms of this License, in the form shown in the Addendum below.
  </li>

  <li>G. Preserve in that license notice the full lists of Invariant Sections
     and required Cover Texts given in the Document's license notice.
  </li>

  <li>H. Include an unaltered copy of this License.
  </li>

  <li>I. Preserve the section Entitled &quot;History&quot;, Preserve its Title, and add
     to it an item stating at least the title, year, new authors, and
     publisher of the Modified Version as given on the Title Page.  If
     there is no section Entitled &quot;History&quot; in the Document, create one
     stating the title, year, authors, and publisher of the Document as
     given on its Title Page, then add an item describing the Modified
     Version as stated in the previous sentence.
  </li>

  <li>J. Preserve the network location, if any, given in the Document for
     public access to a Transparent copy of the Document, and likewise
     the network locations given in the Document for previous versions
     it was based on.  These may be placed in the &quot;History&quot; section.
     You may omit a network location for a work that was published at
     least four years before the Document itself, or if the original
     publisher of the version it refers to gives permission.
  </li>

  <li>K. For any section Entitled &quot;Acknowledgements&quot; or &quot;Dedications&quot;,
     Preserve the Title of the section, and preserve in the section all
     the substance and tone of each of the contributor acknowledgements
     and/or dedications given therein.
  </li>

  <li>L. Preserve all the Invariant Sections of the Document,
     unaltered in their text and in their titles.  Section numbers
     or the equivalent are not considered part of the section titles.
  </li>

  <li>M. Delete any section Entitled &quot;Endorsements&quot;.  Such a section
     may not be included in the Modified Version.
  </li>

  <li>N. Do not retitle any existing section to be Entitled &quot;Endorsements&quot;
     or to conflict in title with any Invariant Section.
  </li>

  <li>O. Preserve any Warranty Disclaimers.</li>

  </ul>

  <p>If the Modified Version includes new front-matter sections or
  appendices that qualify as Secondary Sections and contain no material
  copied from the Document, you may at your option designate some or all
  of these sections as invariant.  To do this, add their titles to the
  list of Invariant Sections in the Modified Version's license notice.
  These titles must be distinct from any other section titles.</p>

  <p>You may add a section Entitled &quot;Endorsements&quot;, provided it contains
  nothing but endorsements of your Modified Version by various
  parties&mdash;for example, statements of peer review or that the text has
  been approved by an organization as the authoritative definition of a
  standard.</p>

  <p>You may add a passage of up to five words as a Front-Cover Text, and a
  passage of up to 25 words as a Back-Cover Text, to the end of the list
  of Cover Texts in the Modified Version.  Only one passage of
  Front-Cover Text and one of Back-Cover Text may be added by (or
  through arrangements made by) any one entity.  If the Document already
  includes a cover text for the same cover, previously added by you or
  by arrangement made by the same entity you are acting on behalf of,
  you may not add another; but you may replace the old one, on explicit
  permission from the previous publisher that added the old one.</p>

  <p>The author(s) and publisher(s) of the Document do not by this License
  give permission to use their names for publicity for or to assert or
  imply endorsement of any Modified Version.</p>

  <h4><a name="section5"></a>5. COMBINING DOCUMENTS</h4>

  <p>You may combine the Document with other documents released under this
  License, under the terms defined in section 4 above for modified
  versions, provided that you include in the combination all of the
  Invariant Sections of all of the original documents, unmodified, and
  list them all as Invariant Sections of your combined work in its
  license notice, and that you preserve all their Warranty Disclaimers.</p>

  <p>The combined work need only contain one copy of this License, and
  multiple identical Invariant Sections may be replaced with a single
  copy.  If there are multiple Invariant Sections with the same name but
  different contents, make the title of each such section unique by
  adding at the end of it, in parentheses, the name of the original
  author or publisher of that section if known, or else a unique number.
  Make the same adjustment to the section titles in the list of
  Invariant Sections in the license notice of the combined work.</p>

  <p>In the combination, you must combine any sections Entitled &quot;History&quot;
  in the various original documents, forming one section Entitled
  &quot;History&quot;; likewise combine any sections Entitled &quot;Acknowledgements&quot;,
  and any sections Entitled &quot;Dedications&quot;.  You must delete all sections
  Entitled &quot;Endorsements&quot;.</p>

  <h4><a name="section6"></a>6. COLLECTIONS OF DOCUMENTS</h4>

  <p>You may make a collection consisting of the Document and other
  documents released under this License, and replace the individual
  copies of this License in the various documents with a single copy
  that is included in the collection, provided that you follow the rules
  of this License for verbatim copying of each of the documents in all
  other respects.</p>

  <p>You may extract a single document from such a collection, and
  distribute it individually under this License, provided you insert a
  copy of this License into the extracted document, and follow this
  License in all other respects regarding verbatim copying of that
  document.</p>

  <h4><a name="section7"></a>7. AGGREGATION WITH INDEPENDENT WORKS</h4>

  <p>A compilation of the Document or its derivatives with other separate
  and independent documents or works, in or on a volume of a storage or
  distribution medium, is called an &quot;aggregate&quot; if the copyright
  resulting from the compilation is not used to limit the legal rights
  of the compilation's users beyond what the individual works permit.
  When the Document is included in an aggregate, this License does not
  apply to the other works in the aggregate which are not themselves
  derivative works of the Document.</p>

  <p>If the Cover Text requirement of section 3 is applicable to these
  copies of the Document, then if the Document is less than one half of
  the entire aggregate, the Document's Cover Texts may be placed on
  covers that bracket the Document within the aggregate, or the
  electronic equivalent of covers if the Document is in electronic form.
  Otherwise they must appear on printed covers that bracket the whole
  aggregate.</p>

  <h4><a name="section8"></a>8. TRANSLATION</h4>

  <p>Translation is considered a kind of modification, so you may
  distribute translations of the Document under the terms of section 4.
  Replacing Invariant Sections with translations requires special
  permission from their copyright holders, but you may include
  translations of some or all Invariant Sections in addition to the
  original versions of these Invariant Sections.  You may include a
  translation of this License, and all the license notices in the
  Document, and any Warranty Disclaimers, provided that you also include
  the original English version of this License and the original versions
  of those notices and disclaimers.  In case of a disagreement between
  the translation and the original version of this License or a notice
  or disclaimer, the original version will prevail.</p>

  <p>If a section in the Document is Entitled &quot;Acknowledgements&quot;,
  &quot;Dedications&quot;, or &quot;History&quot;, the requirement (section 4) to Preserve
  its Title (section 1) will typically require changing the actual
  title.</p>

  <h4><a name="section9"></a>9. TERMINATION</h4>

  <p>You may not copy, modify, sublicense, or distribute the Document
  except as expressly provided under this License.  Any attempt
  otherwise to copy, modify, sublicense, or distribute it is void, and
  will automatically terminate your rights under this License.</p>

  <p>However, if you cease all violation of this License, then your license
  from a particular copyright holder is reinstated (a) provisionally,
  unless and until the copyright holder explicitly and finally
  terminates your license, and (b) permanently, if the copyright holder
  fails to notify you of the violation by some reasonable means prior to
  60 days after the cessation.</p>

  <p>Moreover, your license from a particular copyright holder is
  reinstated permanently if the copyright holder notifies you of the
  violation by some reasonable means, this is the first time you have
  received notice of violation of this License (for any work) from that
  copyright holder, and you cure the violation prior to 30 days after
  your receipt of the notice.</p>

  <p>Termination of your rights under this section does not terminate the
  licenses of parties who have received copies or rights from you under
  this License.  If your rights have been terminated and not permanently
  reinstated, receipt of a copy of some or all of the same material does
  not give you any rights to use it.</p>

  <h4><a name="section10"></a>10. FUTURE REVISIONS OF THIS LICENSE</h4>

  <p>The Free Software Foundation may publish new, revised versions of the
  GNU Free Documentation License from time to time.  Such new versions
  will be similar in spirit to the present version, but may differ in
  detail to address new problems or concerns.  See
  <a href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</a>.</p>

  <p>Each version of the License is given a distinguishing version number.
  If the Document specifies that a particular numbered version of this
  License &quot;or any later version&quot; applies to it, you have the option of
  following the terms and conditions either of that specified version or
  of any later version that has been published (not as a draft) by the
  Free Software Foundation.  If the Document does not specify a version
  number of this License, you may choose any version ever published (not
  as a draft) by the Free Software Foundation.  If the Document
  specifies that a proxy can decide which future versions of this
  License can be used, that proxy's public statement of acceptance of a
  version permanently authorizes you to choose that version for the
  Document.</p>

  <h4><a name="section11"></a>11. RELICENSING</h4>

  <p>&quot;Massive Multiauthor Collaboration Site&quot; (or &quot;MMC Site&quot;) means any
  World Wide Web server that publishes copyrightable works and also
  provides prominent facilities for anybody to edit those works.  A
  public wiki that anybody can edit is an example of such a server.  A
  &quot;Massive Multiauthor Collaboration&quot; (or &quot;MMC&quot;) contained in the site
  means any set of copyrightable works thus published on the MMC site.</p>

  <p>&quot;CC-BY-SA&quot; means the Creative Commons Attribution-Share Alike 3.0 
  license published by Creative Commons Corporation, a not-for-profit 
  corporation with a principal place of business in San Francisco, 
  California, as well as future copyleft versions of that license 
  published by that same organization.</p>

  <p>&quot;Incorporate&quot; means to publish or republish a Document, in whole or in 
  part, as part of another Document.</p>

  <p>An MMC is &quot;eligible for relicensing&quot; if it is licensed under this 
  License, and if all works that were first published under this License 
  somewhere other than this MMC, and subsequently incorporated in whole or 
  in part into the MMC, (1) had no cover texts or invariant sections, and 
  (2) were thus incorporated prior to November 1, 2008.</p>

  <p>The operator of an MMC Site may republish an MMC contained in the site
  under CC-BY-SA on the same site at any time before August 1, 2009,
  provided the MMC is eligible for relicensing.</p>

  <h3><a name="addendum"></a>ADDENDUM: How to use this License for your documents</h3>

  <p>To use this License in a document you have written, include a copy of
  the License in the document and put the following copyright and
  license notices just after the title page:</p>

  <pre>    Copyright (C)  YEAR  YOUR NAME.
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.3
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
      A copy of the license is included in the section entitled &quot;GNU
      Free Documentation License&quot;.
  </pre>

  <p>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
  replace the &quot;with &hellip; Texts.&quot; line with this:</p>

  <pre>    with the Invariant Sections being LIST THEIR TITLES, with the
      Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
  </pre>

  <p>If you have Invariant Sections without Cover Texts, or some other
  combination of the three, merge those two alternatives to suit the
  situation.</p>

  <p>If your document contains nontrivial examples of program code, we
  recommend releasing these examples in parallel under your choice of
  free software license, such as the GNU General Public License,
  to permit their use in free software.
  </p>


  #+END_EXPORT
