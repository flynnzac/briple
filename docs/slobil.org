# -*- org-html-preamble-format: (("en" "%t<br>%a<br>%T")); -*-
#+TITLE: SLOBIL
#+AUTHOR: Zach Flynn
#+DESCRIPTION: SLOBIL is A Object-Based Environment and Language. This manual describes how to use it.
#+SETUPFILE: theme-readtheorg-local.setup

#+HTML_HEAD: <!-- Global site tag (gtag.js) - Google Analytics -->
#+HTML_HEAD: <script async src="https://www.googletagmanager.com/gtag/js?id=UA-59441513-2"></script>
#+HTML_HEAD: <script> window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'UA-59441513-2');</script>

* Introduction

*This documentation is being revised.*

* The Language
** Statements and syntax

   A single line of SLOBIL code is called a statement.  The first element of the statement is one of SLOBIL's /operators/ and the other elements are arguments to the operator.  Statements, like sentences, end with periods. For example,
  
   #+BEGIN_SRC slobil
   ... set /hello "Hello, world!" .
   #+END_SRC

   =set= is the SLOBIL operation to set a slot to a certain value.  The above code sets the slot =/hello= to the String value ="Hello, world!=. Names that have a forward slash preceeding them are /slots/, like =/hello= above. Strings are characters enclosed in double quotation marks.  The following code demonstrates some of the other data types in SLOBIL:

   #+BEGIN_SRC slobil
   ... set /days-in-week 7 .
   ... set /penny 0.01 .
   ... set /facts True .
   ... set /lies False .
   ... set /add-one ( add t 1 . ) .
   #+END_SRC

   An Integer is a number without a decimal part, a Real is a number with a decimal part, a Boolean value is either True or False, an Instruction is a collection of one or more statements quoted as code (created by enclosing code with open parenthesis, "(" and ")").  Instructions can be executed later inside objects perhaps different than the objects in which they were initially defined.

   To use the value located in a object, simply type the name of the slot without the preceeding forward slash.  For example,
   #+BEGIN_SRC slobil
  ... print days-in-week .
  7
   #+END_SRC

   All code elements must be separated by whitespace in SLOBIL including the period that ends the statement and parenthesis.  So it would /not/ be valid to write,

   #+BEGIN_SRC slobil
	' All are WRONG:
	print days-in-week.
	set /add-one (add t 1 .) .
   #+END_SRC

   There must be whitespace before the period.  There also must be whitespace after and before parenthesis. 

   There are four parenthesis types in SLOBIL: open parentheis ("()"), closed parenthesis ("[]"), curly parenthesis ("{}"), and angle brackets ("<>").  The first three all contain groups of statements, but they differ in /when/ the statements they contain are executed.  The angle brackets are used for defining new operations from instructions.

*** Instructions

    Open parenthesis store the code itself as an Instruction object to be executed later using the operation =call=.  For example,
    #+BEGIN_SRC slobil
     ... set /add-one ( add t 1 . ) .
     ... call add-one /t 10 .
     ans = 11
    #+END_SRC

    =call= takes an instruction and then assigns each of the slots that you specify to different values. You do not need to declare what arguments a function takes and you can specify any number of slots to set for any Instruction.  For example, 
    #+BEGIN_SRC slobil
     ... set /add-one ( add t 1 . ) .
     ... call add-one /t 10 .
     ans = 11
     ... call add-one /t 10 /add sub .
     ans = 9
    #+END_SRC

    Any object in an instruction can be replaced by any other (except for a literal value like =11= or ="hello"= ) when the Instruction is called.  The person who wrote the code does not need to do anything to allow this.  You can redefine any non-literal in the code by adding =/name value= in the call to the Instruction.

    Because there is no ambiguity, you do not actually need to use the =call= operation directly.  SLOBIL will insert it for you if the first argument is an instruction.  So the following would work as well,
    #+BEGIN_SRC slobil
     ... add-one /t 10 .
     ans = 11
    #+END_SRC

    Instruction objects can also be used in the =while= looping operation and in several other operations.  

*** Greedy substatements and the =/ans= slot

    Closed parenthesis ("[]") execute the statements inside of them immediately and evaluate to whatever the code sets the =/ans= slot to.  The purpose of these statements is to avoid needing to define temporary slots for intermediate calculations.  For example,
    #+BEGIN_SRC slobil
     ... add [ sub 5 3 . ] [ mul 2 3 . ] .
     ans = 8
    #+END_SRC

    You may have noticed the =ans = ...= after entering some commands.  This tells you the current value of the =/ans= slot which is special in SLOBIL.  Operations often write to the =/ans= slot in the object from which they are called.  It is the way to "return" values after calling an operation or instruction.  You can set any value to the =/ans= slot in the current object by using the =answer= operation.
    #+BEGIN_SRC slobil
     ... answer 10 .
     ans = 10
    #+END_SRC

    The =/ans= slot is special because, after an Instruction finishes running in its temporary object, whatever the value at the =/ans= slot is in that object is moved to the =/ans= slot in the object that called the instruction.  For example,
    #+BEGIN_SRC slobil
     ... add 10 12 .
     ans = 22
     ... set /add-one ( add t 1 . ) .
     ... add-one /t 10 .
     ans = 11
     ... print ans .
     11
    #+END_SRC

    The other reason that the =/ans= slot is special is, as mentioned, closed parenthesis evaluate to the value the statements inside them set the =/ans= slot to.  Because =sub 5 3 .= sets the =/ans= slot to =2= and =mul 2 3 .= sets the =/ans= slot to =6=, =add [ sub 5 3 . ] [ mul 2 3 . ] .= sets the =/ans= slot to =8=.

*** Lazy substatements (Expressions)

    Curly parenthesis ("{}") also enclose statements, but those statements are only evaluated /if/ we try to use the value of that expression which is, like for the closed parenthesis, the value the statements set the =/ans= slot to.  This form of evaluation is often called "lazy evaluation".  SLOBIL calls this data type an "Expression". We can think of closed parenthesis as marking statements we want to "greedily evaluate" and curly parenthesis as marking statements to "lazily evaluate".  Lazy evaluation is useful for the =if= operation and other, similar instructions.  For example,
    #+BEGIN_SRC slobil
     ... set /gt-4
     (
       set /str-t [ to-string t . ] . 
       if [ gt t 4 . ]
          { print [ combine str-t " is greater than 4.\n" . ] . }
          { print [ combine str-t " is less than or equal to 4.\n" . ] . } .
     ) .
    ... gt-4 /t 10 .
    10 is greater than 4.
    ... gt-4 /t 3 .
    3 is less than or equal to 4.
    #+END_SRC

    It works this way because the =if= operation returns the second value if the first value is =True= and the third value if the first value is =False=.  So it tries to access the second value when =t= is =10=, executing the statements in the second argument, and similarly for the third argument when =t= is =3=.

    If we had instead used closed parenthesis, both statements would execute everytime regardless of the the truth of the first argument to =if=.  If we used open parenthesis, an Instruction object would be returned instead of actually doing the printing (the instruction object could be called to actually do the print later).

    Unlike instructions, expressions are evaluated in the object calling them instead of a temporary object inside the calling object. So, for example they can move slots in the calling object:

    #+BEGIN_SRC slobil
    ... set /test ( set /x 2 . sit y . print z . ) .
    ... test /y { move /x /z . } .
    2
    #+END_SRC

    Note: =sit= is an operation that does nothing but evaluate any substatements in its arguments.
    
*** Convert an instruction to an operation

    Angle brackets (<>) transform an instruction object into an operation object.  Instructions are code blocks formed using open parenthesis =()= that operate within whatever object the caller of the instruction defines.  Operations execute with a fixed set of positional arguments determining the object the code executes in.  All of the built-in features of the language are operations, but most programmer-defined code is an instruction.  Occasionally, it is useful to transform instructions into operations.  This transformation is a lot like a procedure definition in other languages. Angle brackets or the =op= operation provide two alternative ways of doing this.   For example:
    #+BEGIN_SRC slobil
     ... set /fraction ( div t1 [ add t1 t2 . ] . ) .
     ... fraction /t1 1 /t2 3.0 .
     ans = 0.25
     ... [ op fraction /t1 /t2 . ] 1 3.0 .
     ans = 0.25
     ... < fraction /t1 /t2 > 1 3.0 .
     ans = 0.25
     ... set /op-fraction < fraction /t1 /t2 > .
     ... op-fraction 1 3.0 .
     ans = 0.25
     ... < fraction /t2 /t1 > 1 3.0 .
     ans = 0.75
    #+END_SRC

    Note that there is no period used to end an operation definition in the angle brackets. The brackets call the instruction =fraction= and sets the slot =/t1= to the value of the first argument and the slot =/t2= to the second argument.  The order would be switched if we had instead used: =< fraction /t2 /t1 >=.

*** Comments

    The last syntax element is the comment.  To write a comment in SLOBIL, use a single quote (='=) as the first character in a statement.  You can think about this quote as a special operator.  Comments end with a new line. The comment operator, like other syntax elements, needs whitespace after it, for example:
    #+BEGIN_SRC slobil
   ... ' This is a correct comment
   ... 'This is an incorrect comment, 'This is interpreted as a reference to data in the Slot /'This
    #+END_SRC

    That is really it as far as syntax is concerned.  Periods terminate statements, parenthesis enclose statements controlling when they are executed, and slots start with a forward slash and their values are obtained by omitting the slash.  We now also know how to define our own instructions and how to call them and how to prepare statements for greedy or lazy evaluation.


*** Ending Last Statement in a Substatement

    In a substatement, the last statement does not need to end with a period because there is no ambiguity.  For example,
    #+BEGIN_SRC slobil
... add 1 [ mul 2 3 ] .
    #+END_SRC

    is a valid statement.  If there are multiple statements, it is usually good practice to end all with a period, but the period can be omitted from the last one.  For example,
    #+BEGIN_SRC slobil
... add 1 [ add 1 1 . mul ans 3 ] .
    #+END_SRC

    is valid.

** Objects

   In SLOBIL, code is executed inside /objects/.  Objects are both data structures and define what slots (variables) are in scope.   Because objects are full fledged data structures, you can switch scope easily or pass a scope as an argument. When you start the interpreter, you are already inside the default, top-level object.  To create a new one, use the =object= operation,

   #+BEGIN_SRC slobil
   ... object /hello "Hello, world!" /x 10 .
   #+END_SRC

   The =object= operation puts a new object in the =/ans= slot.  This object has a =/hello= slot bound to the value ="Hello, world!"= and the =/x= slot bound to the value =10=.  Usually, you will want to bind the value to another slot besides =/ans= which will be overwritten by subsequent statements. You can do either of:
   
   #+BEGIN_SRC slobil
   ... object /hello "Hello, world!" /x 10 .
   ... move /ans /my-object .
   ... ' Or:
   ... set /my-object [ object /hello "Hello, world!" /x 10 ] .
   #+END_SRC

   To access values in a object, you can either use the =get= operation or the "colon notation":

   #+BEGIN_SRC slobil
   ... get /hello my-object .
   ans = Hello, world!
   ... print my-object:/hello
   Hello, world!
   ... print hello .
   Error: Value at `/hello` not found.
   #+END_SRC

   From the last line, we can see that the value =hello= exists only in the object located at =/my-object= which we are not currently in.  So we cannot access its =/hello= slot directly.  

We can execute an instruction inside a certain object by using the =in= command.

   #+BEGIN_SRC slobil
   ... in my-object ( print [ combine hello " Goodbye!" ] . ) .
   Hello, world! Goodbye!
   #+END_SRC
   

   We can import values from one object into their corresponding slots in the current object by using the =import= operation.

   #+BEGIN_SRC slobil
   ... import my-object .
   ... print hello .
   Hello, world!
   #+END_SRC
   

   Aside from being a useful data structure, objects can be used as /namespaces/.  For example,

   #+BEGIN_SRC slobil
   ... set /math [ object ] .
   ... set /factorial
          (
            set /i 2 .
            set /prod 1 .
            while ( lt-eq i t )
                  (
                    set /prod [ mul i prod ] .
                    incr i .
                  ) .
            answer prod .
          ) math .
   ... math:/factorial /t 5 .
   ans = 120
   #+END_SRC       

   You can assign instructions inside objects and then they can be called from that object using the colon notation.  This code block also demonstrates that the =set= operation optionally takes a third argument: the object in which to set the slot.  When omitted, it sets the slot in the current object.

   If you don't need to worry about name collisions, you can =import= it.

   #+BEGIN_SRC slobil
   ... import math .
   ... factorial /t 5 .
   ans = 120
   #+END_SRC

   Objects are flexible data structures.  They can be used to represent structures with multiple kinds of values (like =struct= in C).  Or they can be used as namespaces for libraries or different parts of a code base.


   Objects are also, as the name suggests, the data type used for object-oriented programming.  SLOBIL is a prototype-based programming language.  It does not have a concept of "class" and "instance".  Instead Objects inherit from other Objects.  For example,

   #+BEGIN_SRC slobil
   ... set /rectangle [ object /area ( mul W L ) ] .
   ... set /rect1 [ new rectangle /W 5 /L 4 ] .
   #+END_SRC

   =/rect1= will now contain an object that inherits from the object at =/rectangle=.  If you make changes to the object currently located at =/rectangle=, it will be reflected in the object currently at =/rect1=.  Importantly, the objects are what matters not the slot at which they are stored.  Slots are locations, not values.  So if you move the =/rectangle= object to some other slot, that will not change anything.  Similarly, if you overwrite the =/rectangle= slot with a new value, this will not change the object located at =/rect1=.

*** Additional details about colon notation

    The colon notation can be nested.
    
    #+BEGIN_SRC slobil
    ... set /x [ object /y [ object /z 10 ] ] .
    ... print x:/y:/z .
    10
    #+END_SRC

    It can also choose the slot by referencing the value of another slot.
    #+BEGIN_SRC slobil
    ... set /x [ object /y 10 ] .
    ... set /z /y .
    ... print x:z .
    10
    #+END_SRC

    /But/ we cannot use subexpressions in the colon notation:
    #+BEGIN_SRC slobil
    ... set /x [ object /y 10 ] .
    ... ' BAD! print x:[ answer /y ] .
    #+END_SRC

** Slots   

   Slots are the locations of data in Objects.  They are data themselves and can be manipulated like other data objects in SLOBIL.  For example, you can set other slots to slots and use those values wherever you would use slots.

   #+BEGIN_SRC slobil
... set /x /y .
... print x .
/y
... set x "hello" .
... print x .
/y
... print y .
hello
   #+END_SRC

   You can also set the value of a Slot by just writing the slot location as the first element of a statement, i.e.:
   #+BEGIN_SRC slobil
... /x "hello" .
... print x .
hello
   #+END_SRC

   Stylistically, I like using =set= whenever the slot is given at another slot location and just the Slot whenever it is a literal Slot.  For example:
   #+BEGIN_SRC slobil
... /x /y .
... set y 2 .
... /z "hello" .
   #+END_SRC

   You can move data between Slots with the =move= command:

   #+BEGIN_SRC slobil
... /x "hello" .
... move /x /y .
... print y .
hello
... print x .
Error: Value at slot /x not found.
   #+END_SRC

   Slots are data denoting locations so they are often useful ways to manipulate the locations of values instead of the values themselves, as with the =move= and =set= operations.

** Environment

*** Saving state
    SLOBIL is not only a programming language. It is also an /environment/.  The current state of SLOBIL --- the values and where they are located in the object --- can be saved to disk and re-loaded later on, using the =save= and =load= operations.

    To save the current object to a file called /state.darb/,
    #+BEGIN_SRC slobil
 ... save "state.darb" .
    #+END_SRC

    To load the object back in:
    #+BEGIN_SRC slobil
 ... load "state.darb" .
    #+END_SRC

    Optionally, a second argument can be provided to =load= to load the data into a specific object, not just the current one.

    #+BEGIN_SRC slobil
 ... load "state.darb" old-stuff .
    #+END_SRC

    Where =old-stuff= is a object.

*** Interacting with the user

    One of SLOBIL's strengths is in rapidly-developing interactive programs.  SLOBIL's syntax is command-like so interaction in such a program can often be done using SLOBIL's prompt.  These types of programs often require input from the user and the ability to interact with other non-SLOBIL programs on the computer.  

    The =input= operation accepts input from the user in the same way as SLOBIL's usual prompt.  It takes a slot as an argument and assigns the String value the user enters to that slot in the current object.

    #+BEGIN_SRC slobil
... set /get-name 
        (
          print "What is your name?" .
          input /ans .
        ) .
... get-name .
What is your name?
Zach
ans = "Zach"
    #+END_SRC

    To call commands from the shell, use the =shell= operation.  The =shell= operation sets the =/ans= slot to a string containing the output of the command.

    #+BEGIN_SRC slobil
... shell "ls" .
ans = "file1.txt
file2.txt
"
    #+END_SRC

    The =change-dir= operation changes the working directory of SLOBIL and the =current-dir= operations sets the =/ans= slot to a String giving the current working directory.

    #+BEGIN_SRC slobil
... change-dir "/home/zlf" .
... current-dir .
ans = "/home/zlf" 
    #+END_SRC

** Tasks (concurrent programs)
   SLOBIL can be used to write concurrent (multi-threaded) programs using Task objects.  SLOBIL's tasks are a type of data.  You can do everything to them that you can do to other data (move it, delete it, etc).

   Tasks are created with the =task= operation.  The =task= operation takes three arguments.  The first gives the slot to assign the Task to.  The second gives the /body/ of the Task, an instruction that the Task will execute when it is run (Tasks do not immediately start running on creation).  The third argument is the initial state of the task, a object defining the environment in which the task will run.

   #+BEGIN_SRC slobil
... task /my-task ( commands to run... ) [ object . ] .
   #+END_SRC

   Tasks are started with the =run-task= operation.  =run-task= takes a single argument, the task to start running.  Running a task means that the instruction that forms the body of the task is executed.  Only one instance of the task can be running at a given time but the same task executed can be executed multiple times (the state of the task will not revert when it is run again).

   The structure of a task is described in the below table:

   | Element | Description                                                                                              |
   |---------+----------------------------------------------------------------------------------------------------------|
   | Body    | The instruction run in a separate thread from the main SLOBIL thread.                                       |
   | State   | A Object that contains the current state of the task.  The object being modified by the Task's body. |
   | Queue   | A Object that contains data queued to pass from the main thread to the Task's thread or vice-versa.    |
   |---------+----------------------------------------------------------------------------------------------------------|

   A Task's state object is entirely /separate/ from the current object.  There is no way to directly access data in a task except in the body of the task.  No data in the Task's queue can be accessed directly in any thread. Data can be sent between the main thread and the task thread using operations.

   Tasks /accept/ data when they take data from their queue and move it into their state object.  They can do this with one of three operations: =accept=, =accept-or=, and =select=.

   The =accept= operation takes a slot as an argument and waits for data to be available at that slot in the Task's queue.  A Task can be provided as an optional second argument to =accept= to look for the data in another task's queue. Once that data is available, it sets the =/ans= slot in the Task's state object to the value of the data.  =accept= is /blocking/ so no other code will be executed in the thread running the =accept= operation until the data is available in the queue.  SLOBIL does not allow running =accept= in the main task because there is no way to exit the blocking.  =accept-or= can be used instead.

   The =queue= operation moves data from one object into the queue of another Task.  Its arguments are a slot to set in the queue object, the data to send, and the task's queue to access.

   #+BEGIN_SRC slobil
... task /t1 ( print [ accept /hello ] . ) .
... run-task t1 .
... queue /hello "Hi!" t1 .
Hi!
   #+END_SRC

   Because the =accept= operation blocks the thread until the data is entered into the queue, it cannot be used when the data =accept= is looking for is optional.  

   The =accept-or= operation checks whether data exists at a certain slot in the queue, if it does, it sets the =/ans= slot to the result.  If not, it executes its second argument, an instruction, in its state object.  This operation does not block.  It checks once if the data is available and otherwise executes the instruction.  For example, in a Task body, we might have:

   #+BEGIN_SRC slobil
accept-or /hello ( set /hello "Hello." ) .
   #+END_SRC

   The main use of =accept-or= is to provide default values for missing data or to do something else if data is not available.

   Alternatively, the =select= operation executes one of several instructions if data comes in at any number of slots.  =select= takes paired slots and instructions as its arguments.  It waits for data to appear in its queue at any of the slots listed.  The first slot to receive data is "selected".  The instruction associated with the slot is executed in the slot's state object after setting the =/ans= slot to the value of the data located at the slot in the queue.

   #+BEGIN_SRC slobil
... task /t1 ( 
                set /continue True .
                while ( answer continue )
                      (
                        select /add-one ( print [ add ans 1 ] ) 
                               /sub-one ( print [ sub ans 1 ] )
                               /continue ( set /continue ans ) .
                      ) .
             ) .
... run-task t1 .
... queue /add-one 3 t1 .
4
... queue /sub-one 3 t1 .
2
   #+END_SRC

* A Complete Example Program

  The following program is one I use daily to keep track of time spent on client work.  I use the program to keep track of my time by choosing a client and then using the =start= and =stop= instructions. And then the =day-time= instruction to output the hours for each client by day.

** Source Code

   #+BEGIN_SRC slobil
' Initial state

set /current-client "Non-billable" .
set /last-clock -1 .
set /record [ object ] .
set /running False .
set /current-file Nothing .

' Start a new record of work or load an old one

set /init
    < (
      up set /current-file file .
      please ( load file record )
             (
               up set /record [ object ] .
               up set /client-list [ object ] record .
               print "Starting new file." .
             ) .
    ) /file > .

' Save record of work in SLOBIL format

set /save-hours
    (
      in record ( save current-file ) .
    ) .

' Set current client

set /client
    <
    (
      if [ not running ]
         {
           if [ exist /name ]
              {
                up set /current-client name .
                add-client-to-list name .
              }
              {
                up set /current-client [ choose-client ] .
              } .
           up set /last-clock -1 .
         }
         {
           print "Currently running, stop first." .
         } .
    )
    /name
    > .

' Start clock for current client
set /start
    (
      if [ not running ]
         {
           up set /last-clock [ clock ] .
           up set /running True .
           print [ combine "Starting on " current-client " ..." ] .
         }
         {
           print "Currently running, stop first." .
         } .
    ) .

' Stop clock for current client with a description of task.

set /stop
    (
      if running
         {
           last record /r .
           next ans .
           set ans
               [
                 object
                   /client current-client
                   /start-time last-clock
                   /stop-time [ clock . ]
                   /description desc
               ] record .
           up set /running False .
           save-hours .
         }
         {
           print "Not currently running." .
         } .
    ) .


' A map to day of week
set /day-of-week-map
    [
      list
        "Sunday"
        "Monday"
        "Tuesday"
        "Wednesday"
        "Thursday"
        "Friday"
        "Saturday"
        "Sunday" 
    ] .


' Convert milliseconds to hours
set /make-hours-day-time
    < (
      do < ( div t 1000.0 60 60 ) /t > structure .
    ) /structure > .

      
' Return a structure describing a single day of activity
set /day-time
    (
      set /final [ object ] .
      set /clock1
          [
            make-clock
              [
                object
                  /day day
                  /month month
                  /year year
                  /hour 0
                  /minute 0
                  /seconds 0
                  /milliseconds 0
                . ] .
          ] .

      set /clock2
          [
            make-clock
              [
                object
                  /day day
                  /month month
                  /year year
                  /hour 23
                  /minute 59
                  /seconds 59
                  /milliseconds 999
                . ] .
          ] .

      set /i /r1 .
      while ( exist i record )
            (
              if [ and
                     [ gt-eq record:i:/start-time clock1 ]
                     [ lt-eq record:i:/start-time clock2 ] ]
                 {
                   set /client [ to-slot record:i:/client ] .
                   set /elapsed [ sub record:i:/stop-time record:i:/start-time ] .

                   if [ exist client final ]
                      {
                        set client [ add final:client elapsed ] final .
                      }
                      {
                        set client elapsed final .
                      } .
                 } .
              set /i [ next i ] .
            ) .
      make-hours-day-time final .
    ) .


' Add client to client list
set /add-client-to-list
    < (
      last record:/client-list /c .
      next ans .
      set ans client record:/client-list .
    ) /client > .


' Select client from menu
set /choose-client
    (
      set /i /c1 .
      while ( exist i record:/client-list )
            (
              print
                [
                  combine
                    [ to-string [ to-number i ] ]
                    ": " 
                    record:/client-list:i .
                ] .
              set /i [ next i . ] .
            ) .
      print "Choose Client: " False .
      input /num .
      set /loc [ to-slot [ combine "c" num ] ] .
      answer record:/client-list:loc .
    ) .

' Get current status (client, whether running)
set /status
    (
      print [ combine "Current client: " current-client ] .
      if running
         {
           print "Running a task." .
         }
         {
           print "Not running." .
         } .
    ) .

' Rename a client
set /rename-client
    (
      ' Update client in list
      set /i /c1 .
      set /cont True .
      while ( and [ exist i record:/client-list ]
                  cont )
            (
              if [ string-eq record:/client-list:i client ]
                 {
                   set i new-client record:/client-list .
                   set /cont False .
                 } .

              set /i [ next i ] .
            ) .
      
      ' Update client in records

      set /i /r1 .
      while ( exist i record )
            (
              if [ string-eq record:i:/client client ]
                 {
                   set /client new-client record:i .
                 } .
              set /i [ next i ] .
            ) .
    ) .
          

' Rewind X minutes from start

set /start-back
    < (
      if [ not running ]
         {
           print "Currently not running." .
         }
         {
           up set /last-clock [ sub last-clock [ mul x 60 1000 ] ] .
         } .
    ) /x > .

' Rewind X minutes from last entry

set /rewind-last
    < (

      set /end [ last record /r ] .
      set /stop-time [ sub record:end:/stop-time [ mul x 60 1000 ] ]
          record:end .
    ) /x > .

   #+END_SRC

** Building the Code

   We can then use a script like the following, supposing we have saved the above code in a file /billable.slob/, to build a binary version of the program in a convenient location.

   #+BEGIN_SRC slobil
... source "billable.slob" .
... save "~/.darbs/billable.darb" .
   #+END_SRC

** Using the code

   Then, whenever we would like to load the code, we can simply do:
   #+BEGIN_SRC slobil
... use "billable" .
   #+END_SRC

   Then all the instructions from the /billable/ program are available to us.

* Examples
** Quicksort

   #+INCLUDE: "../examples/quicksort.slob" src slobil

   Example of use:

   #+BEGIN_SRC slobil
... set /x [ list 3 2 4 1 ] .
... quicksort /input x /slice /t /compare lt .
... print x .
ans = a object with:
t1 of type Integer, value: 1
t2 of type Integer, value: 2
t3 of type Integer, value: 3
t4 of type Integer, value: 4
... quicksort /input x /slice /t /compare gt .
... print x .
a object with:
t1 of type Integer, value: 4
t2 of type Integer, value: 3
t3 of type Integer, value: 2
t4 of type Integer, value: 1
   #+END_SRC

** A Line-Oriented Text Editor

   This example is a simple interactive program where the user enters commands to edit a buffer. 

   #+INCLUDE: "../examples/arbed.slob" src slobil

   Example of use:
   #+BEGIN_SRC slobil
... import slobiled .
... i "Hello" .
... o .
Hello
... n .
... i "Goodbye" .
... o .
Goodbye
... p .
... o .
Hello
   #+END_SRC

** Numerical Differentiation

   #+INCLUDE: "../examples/deriv.slob" src slobil

   Example of use:
   #+BEGIN_SRC slobil
... set /f < ( power t 2 ) /t > .
... deriv /f f /x 1.0
ans = 2.0
   #+END_SRC

** Compute Factorial

   #+INCLUDE: "../examples/factorial.slob" src slobil

   Example of use:
   #+BEGIN_SRC slobil
... factorial 5 .
ans = 120
... factorial-recurse /t 5 .
ans = 120
   #+END_SRC

*** Note on Recursion

    Operations cannot be directly defined recursively, but Instructions can be.  That is why the code above first defines =-factorial-recurse= as an instruction and then creates the operation.

** Numerical Integration

   #+INCLUDE: "../examples/integrate.slob" src slobil

   Example of use:
   #+BEGIN_SRC slobil
... integrate /f < ( power t 2 ) /t > /lb 0.0 /ub 1.0 /n 1000 .
ans = 0.332834
   #+END_SRC

** Basic Linear Algebra

   This example demonstrates both application methods like =do= and =collapse= as well as when to use operations for programmer code.  Operations make more sense when the arguments are all the same kind of thing, the order is the only thing that might matter, like in this example where we are multiplying two matrices.  Instructions are preferred when the argument's position is uninformative about the purpose of the argument, as in the previous example with numerical integration.

   #+INCLUDE: "../examples/matrix.slob" src slobil

   Example of use:
   #+BEGIN_SRC slobil
... set /A [ list [ list 1 2 ] [ list 3 4 ] ] .
... set /B [ list [ list 6 2 ] [ list 3 4 ] ] .
... transpose A .
ans = a object with:
t1 of type Object, value: a object with:
t1 of type Integer, value: 1
t2 of type Integer, value: 3
t2 of type Object, value: a object with:
t1 of type Integer, value: 2
t2 of type Integer, value: 4
... matrix-multiply A B .
ans = a object with:
t1 of type Object, value: a object with:
t1 of type Integer, value: 10
t2 of type Integer, value: 26
t2 of type Object, value: a object with:
t1 of type Integer, value: 11
t2 of type Integer, value: 25
   #+END_SRC

** Split a String

   #+INCLUDE: "../examples/tokenize.slob" src slobil

   Examples of use:
   #+BEGIN_SRC slobil
... tokenize /line "1,2,3" /sep "," .
ans = a object with:
t1 of type String, value: 1
t2 of type String, value: 2
t3 of type String, value: 3
   #+END_SRC

** Linking C code

   One of the big outstanding tasks with SLOBIL is to write a more user-friendly (and documented) /libslobil/ for adding extensions, but it is currently possible to write SLOBIL operations in C, using SLOBIL's =link= operation to import the code.

   The following is an example of C code.

   #+INCLUDE: "../examples/link.c" src c

   We then compile it into a shared object file, linking against =libslobil=.

   #+INCLUDE: "../examples/link_compile.sh" src sh

   The code then can be loaded into SLOBIL with the =link= operation like so:

   #+INCLUDE: "../examples/link.slob" src slobil

   The first argument of =link= gives the shared-object file name.  The second argument gives the name of the function.  The third argument gives what the name of the SLOBIL operation will be.

   Now, the operation can be called in the following way:
   #+BEGIN_SRC slobil
... log1 1 .
ans = 0.693147
   #+END_SRC

** Concurrent Programming

   SLOBIL uses Tasks to run Instructions in separate processes.  The following example demonstrates how =queue=, =accept=, and =select= work to move data between the main Task and other Tasks.

   #+INCLUDE: "../examples/task.slob" src slobil

   The following task that can be used to run any code in the background.  

   #+INCLUDE: "../examples/background.slob" src slobil

* Reference

  This section gives the full vocabulary of the language.  The grammar of the language is described in the previous sections.  I describe each type of data, and the operations associated with it. 

  Throughout, I enclose an operation's optional arguments between bars (||). 

** Objects

*** Short description

    A object contains data located at slots.  Data can be retrieved  from and inserted into objects.  Objects also defined the /scope/ of SLOBIL code because code is executed inside objects.  So the values of variables depend on which object you are executing the code.  This allows the user to flexibly manipulate scope.

*** Implementation details

    Objects are hash tables.  The keys to the table are called slots.  The number of bins in the hash table grows as more elements are added.  This keeps lookup times low, but the object will rehash as it grows.  Rehashing can be turned off by using the =auto-rehash= operation.

*** Object operations

**** Creation

     - =object SLOT1 VALUE1 SLOT2 VALUE2 ...= --- sets the =/ans= slot to a object with =VALUE1= located at =SLOT1= and so on.

     - =list VALUE1 VALUE2 ...= --- set the =/ans= slot to a Object with =VALUE1= at Slot =/t1=, =VALUE2= at Slot =/t2=, and so on.

     - =range INTEGER1 INTEGER2 |INTEGER3|= --- set the =/ans= slot to a Object with =INTEGER1= at =/t1= and =INTEGER1 + INTEGER3= at =/t2= and so on so long as the value is less than or equal to =INTEGER2=.


**** Insert, move, and remove data to and from slots
     - =set SLOT VALUE |OBJECT|= --- sets the value at =SLOT= to =VALUE= in the object =OBJECT=.  If the =OBJECT= argument is omitted, then it will set the slot in the current object.

     - =move SLOT1 SLOT2= --- move the value located at =SLOT1= to =SLOT2=.  Does not copy the data so it is an efficient way to move data.

     - =delete SLOT= --- delete the value at =SLOT= in the current object.

     - =free SLOT= --- delete the value at =SLOT= in the current object.  Does not send the free'd data to the garbage collector but instead releases the memory immediately.  The trade-off versus =delete= is that it forces immediate removal of memory in main execution thread (which takes longer and blocks other instructions) while =delete= is faster but the memory may not be immediately removed (higher memory use).


**** Access data in Object

     - =get SLOT |OBJECT|= --- sets the =/ans= slot to the value located at =SLOT= in =OBJECT=.  If the =OBJECT= argument is not specified, get from the current object.

     - =exist SLOT |OBJECT|= --- set the =/ans= slot to =True= if a value exists at the =SLOT= in =OBJECT=.  If the =OBJECT= argument is omitted, check in the current object.

     - =import OBJECT= --- set the Slots in the current Object to hold the same values that they hold in =OBJECT=.

     - =filter OBJECT OPERATION= --- set the =/ans= slot to a Object containing all the elements in =OBJECT= such that the =OPERATION= applied to the element of the Object sets the =/ans= slot to =True=.

**** Apply Operations to elements of a Object

     - =do OPERATION OBJECT1 OBJECT2 ... OBJECTN= --- execute =OPERATION= which takes its arguments (1...N) from each element in =OBJECT1=, ..., =OBJECTN=.  Sets the =/ans= slot to a Object which contains whatever the =OPERATION= evaluates to at the corresponding Slots.  For example, =do add [ list 1 2 3 . ] [ list 4 5 6 . ]= sets the =/ans= slot to a Object with elements (5,7,9) at slots =(/t1,/t2,/t3)=.  =do= will only return results at Slots that exist in all Objects.  So, for example, =do add [ list 1 2 3 . ] [ list 4 5 . ]= sets the =/ans= Slot to =list 5 7=.

     - =collapse OPERATION OBJECT |SLOT|= --- sets the =/ans= slot to the value of applying =OPERATION= to the value in the =OBJECT= at Slot =/SLOT1= and =/SLOT2= and then again to the result of that and to the value of  =/SLOT3= and so on. For example, =collapse add [ list 1 2 3 . ] /t= sets the =/ans= slot to =6=.  If the =SLOT= argument is omitted, it is assumed to be =/t=.

**** Execute code in a object

     - =in OBJECT INSTRUCTION= --- call =INSTRUCTION= in =OBJECT=.

     - =up STATEMENT= --- execute STATEMENT in the object above the current one after resolving the values of the arguments of the statement in the current object.  For example, we can create an Instruction that can be used to increment a variable in place, like so: 
       #+BEGIN_SRC slobil
       ... set /inc ( up set x [ add 1 [ up get x . ] . ] . ) .
       ... set /x 1 . 
       ... inc /x /x . 
       ... print x .
       2
       #+END_SRC

**** Test if a object

     - =is-object VALUE= --- sets the =/ans= Slot to =True= if =VALUE= is a Object and to =False= otherwise.

**** Technical

     - =rehash OBJECT= --- manually rehash the object's underlying hash table.


** Reals and Integers

*** Short description
    Real and Integer are distinct types in SLOBIL.  A Real is a number with a decimal point.  An Integer is a number without a decimal point. Sometimes either type can be used for an operation.  In this case, I refer to the argument type as a Number in describing the operation for brevity.  Number is /not/ a SLOBIL type.

*** Implementation details

    A Real is a double-precision floating point value (equivalent to C's double).

    An Integer is an arbitrarily long integer (a "bignum").  Integers are implemented using GnuMP.

*** Real and Integer operations
**** Arithmetic operations
     - =add NUMBER1 NUMBER2 ...= --- adds all the numbers together and sets the =/ans= slot to the result.

     - =mul NUMBER1 NUMBER2 ...= --- multiplies all the numbers together and sets the =/ans= slot to the result.

     - =sub NUMBER1 NUMBER2 ...= --- subtracts the second number from the first and the third number from that and so on and sets the =/ans= slot to the result. 

     - =div NUMBER1 NUMBER2 ...= --- divides the first number by the second, the result by the third number, and so on and sets the =/ans= slot to the result.

     - =mod NUMBER1 NUMBER2= --- return the remainder of dividing the first number by the second.

     - =incr INTEGER1 |INTEGER2|= --- increment =INTEGER1= by =INTEGER2= or by 1 if INTEGER2 is omitted.  The difference between this operation and =add= is that it modifies =INTEGER1= in place.  =INTEGER2= can be a negative number.


**** Comparison operations
     - =gt NUMBER1 NUMBER2= --- set the =/ans= slot to =True= if =NUMBER1= is greater than =NUMBER2= and to =False= otherwise.

     - =lt NUMBER1 NUMBER2= --- set the =/ans= slot to =True= if =NUMBER1= is less than =NUMBER2= and to =False= otherwise.

     - =eq NUMBER1 NUMBER2= --- set the =/ans= slot to =True= if =NUMBER1= is equal to =NUMBER2= and to =False= otherwise.

     - =lt-eq NUMBER1 NUMBER2= --- set the =/ans= slot to =True= if =NUMBER1= is less than or equal to =NUMBER2= and to =False= otherwise.

     - =gt-eq NUMBER1 NUMBER2= --- set the =/ans= slot to =True= if =NUMBER1= is greater than or equal to =NUMBER2= and to =False= otherwise.

**** Conversion operations
     - =to-number STRING|SLOT= --- if the argument is a String, try to convert to a number and set the =/ans= Slot to the result.  If the argument is a Slot and ends in a number, set the =/ans= Slot to the result.

     - =to-real INTEGER= --- set the =/ans= Slot to a Real representing the =INTEGER=.

**** Test if type operations
     - =is-integer VALUE= --- sets the =/ans= Slot to =True= if the =Value= is an Integer and to =False= otherwise.

     - =is-real VALUE= --- sets the =/ans= Slot to =True= if the =Value= is a Real and to =False= otherwise.

**** Common mathematical operations
     - =log NUMBER= --- set the =/ans= Slot to the natural logarithm of =NUMBER=.

     - =exp NUMBER= --- set the =/ans= Slot to the =NUMBER= power of the natural base.

     - =power NUMBER1 NUMBER2= --- set the =/ans= Slot to =NUMBER1= raised to the =NUMBER2= power.

     - =floor REAL1= --- set the =/ans= Slot to the greatest Integer less than =REAL1=.

     - =ceiling REAL1= --- set the =/ans= Slot to smallest Integer greater than =REAL1=.


** Strings

*** Short description

    Strings in SLOBIL are text.  A string literal is enclosed in quotation marks.  SLOBIL supports UTF-8 encodings. Non-ASCII characters are handled correctly: a single character is a single character no matter how many bytes it is. It also implements a collection of escape sequences for whitespace and quotation marks that should be included in the string itself.

    The escape sequences are:

    | Escape Sequence  | Meaning          |
    |------------------+------------------|
    | \\               | \                |
    | \'               | ' (single-quote) |
    | \t               | tab              |
    | \n               | newline          |
    | \r               | carriage return  |
    | ' (single-quote) | " (double quote) |
    |------------------+------------------|

*** Implementation details

    Strings are internally UTF-32 encoded to enable faster access by index number and because it makes creating substrings faster.  SLOBIL accepts UTF-8 as input because that is more common in terminals and in file-encodings.

*** String operations
**** Access, search, and modify string elements

     - =substring STRING INTEGER1 INTEGER2= --- sets the =/ans= Slot to the subset of =STRING= where the characters included are determined by =INTEGER1= and =INTEGER2=.  Strings are 1-indexed in SLOBIL so the first character is at location 1.  If the =INTEGER= is less than or equal to 0, determine the location from the end of the String.  So if =INTEGER1= and =INTEGER2= are =0=, then it will set the =/ans= slot to the last character in =STRING=.

     - =match STRING1 STRING2 |INTEGER|= --- find occurences of regular expression =STRING1= in String =STRING2=.  Sets the =/ans= Slot to a Object with all submatches located at the =/tN= objects.  The optional third argument gives the number of matches to return.  If =0= is provided, return all matches (default).

     - =replace STRING1 STRING2 STRING3 |INTEGER|= --- set the =/ans= Slot to a String formed by replacing all occurences of regular expression =STRING1= with =STRING2= in =STRING3=.  The optional fourth argument gives the number of matches to replace.  If =0=, replace all (default).

**** String properties

     - =length STRING= --- sets the =/ans= slot to the number of characters in =STRING=.

**** String comparison

     - =string-eq STRING1 STRING2= --- sets the =/ans= Slot to =True= if the two strings are equal and to =False= otherwise.

     - =string-lt STRING1 STRING2= --- sets the =/ans= Slot to =True= if =STRING1= is less than =STRING2= in the sense that the ASCII characters have lower values.

     - =string-gt STRING1 STRING2= --- sets the =/ans= Slot to =True= if =STRING1= is greater than =STRING2= in the sense that the ASCII characters have lower values.

     - =char-eq STRING1 INTEGER STRING2= --- test if character =INTEGER= of string (using same index numbers as for =substring=) is equal to =STRING2=.  This is a slight performance improvement over testing whether the =substring= with only one character is equal to the string.

**** Combine strings

     - =combine STRING1 STRING2 ... STRINGN= --- sets the =/ans= slot to the concatenation of the two Strings so that the resulting String is ="STRING1STRING2"=.

**** Convert to string

     - =to-string INTEGER|REAL|SLOT |INTEGER2|= --- sets the =/ans= Slot to a String representing the =INTEGER= or =REAL= or =SLOT= provided as the first argument.  The second argument is used if a =REAL= argument is provided.  =INTEGER2= gives the number of elements after the decimal point to include.  If not provided, 6 decimal places are included.

**** Test if string

     - =is-string VALUE= --- sets the =/ans= Slot to =True= if the =VALUE= is a String and to =False= otherwise.

**** Strings from User Input

     - =input SLOT= --- reads a line of text the user enters and sets =SLOT= to that value (always a String).

** Slots

*** Short description

    Slots are a type of data in SLOBIL usually used to refer to locations in slots.  More generally, they are symbols.  They can be compared with one another and modified.  Slots are not "associated" with objects.  They are data without any associated context.

*** Implementation details

    Slots are a structure containing the name of the object and the hashed value of the name so they can be easily inserted into the object hash table.  
    
*** Slot operations

**** Operations on "list" slots

     - =next SLOT= --- if the =SLOT= ends in a number, return the Slot with that number incremented by 1.

     - =previous SLOT= --- if the =SLOT= ends in a number, return the Slot with that number minus 1.  If that would cause the number to be less than 1 set the =/ans= Slot to the "first" slot with that prefix so that =previous /t1 .= sets =/ans= to =/t1=.

     - =last OBJECT SLOT= --- return the last Slot in the =OBJECT= that starts with =SLOT=.  So that if you had slots =/x0=, =/x1=, and =/x2= in the Object, =last OBJECT /x= would return =/x2=.

**** Convert to slot

     - =to-slot STRING|INTEGER= --- sets the =/ans= slot to a Slot named =STRING= or to =/tINTEGER=.

**** Slot comparison
     - =slot-eq SLOT1 SLOT2= --- sets the =/ans= Slot to =True= if the two Slots are the same and to =False= otherwise.

**** Test if a slot
     - =is-slot VALUE= --- sets the =/ans= Slot to =True= if the =VALUE= is a Slot and to =False= otherwise.



** Booleans

*** Short description

    Booleans can take on two values: =True= or =False=.  Comparison and testing operations usually set the =/ans= slot to a Boolean value.

*** Implementation details

    Booleans are simply a binary value.  They use the C99 bool type internally.
    
*** Boolean operations

    - =is-boolean VALUE= --- sets the =/ans= Slot to =True= if the =VALUE= is a Boolean and to =False= otherwise.

    - =and BOOLEAN1 BOOLEAN2= --- sets the =/ans= Slot to =True= if BOOLEAN1 and BOOLEAN2 are =True= and to =False= otherwise.

    - =or BOOLEAN1 BOOLEAN2= --- sets the =/ans= Slot to =True= if either BOOLEAN1 or BOOLEAN2 are =True= and to =False= otherwise.

    - =not BOOLEAN= --- sets the =/ans= Slot to =True= if BOOLEAN is =False= and to =False= otherwise.

** Instructions

*** Short description

    Instructions are code objects which have not yet been executed.  They can be called or executed in different objects.

*** Implementation details

    Instructions are internally "compiled" code.  They are then supplied with an environment (a object) before they are executed.  The compiled code object is a linked list of statements each of which is a linked list of elements.  Elements are either literal data values or the names of slots to lookup in the environment.

*** Instruction operations

    - =call INSTRUCTION SLOT1 VALUE1 SLOT2 VALUE2 ...= --- executes =INSTRUCTION= in a Object with =SLOT1= assigned to =VALUE1= and so on.

    - =is-instruction VALUE= --- sets the =/ans= Slot to =True= if the =VALUE= is an Instruction and to =False= otherwise.

    - =op INSTRUCTION SLOT1 ... SLOTN= --- set the =/ans= slot to an operation that calls =INSTRUCTION= after binding =SLOT1= to the first argument, and so on.

    - =code INSTRUCTION= --- sets the =/ans= slot to a String containing the code for the =INSTRUCTION=.

    - =is-operation VALUE= --- sets the =/ans= Slot to =True= if the =VALUE= is an Operation and to =False= otherwise.

** Files

*** Short description

    Files are stream objects that you can write to and read from.

*** Implementation details

    Files are like the C FILE type.  

*** File operations

    - =is-file VALUE= --- sets the =/ans= Slot to =True= if the =VALUE= is a File and to =False= otherwise.

    - =open-file STRING1 |STRING2|= --- sets the =/ans= Slot to a File object corresponding to the file named =STRING1= with mode =STRING2= (default: "r+").

    - =read FILE= --- read a byte from a file and set the =/ans= slot to the result (an Integer).

    - =read-char FILE= --- read a single character from a File object and set the =/ans= Slot to that character (a String).

    - =read-line FILE= --- sets the =/ans= Slot to the next line from FILE.

    - =write INTEGER FILE= --- =INTEGER= must be in [0,255].  Directly writes a byte to =FILE=.

    - =write-string STRING FILE= --- Write a =STRING= to =FILE= using UTF-8 encoding. 

    - =close SLOT= --- if a File object is located at =SLOT=, close the File and remove its reference from the =SLOT=.

** Nothing 

*** Short description

    =Nothing= is a value that is not any other value and is a different type than any other value.

*** Nothing operations

    - =is-nothing VALUE= --- sets the =/ans= slot to =True= if the value is =Nothing= and to =False= otherwise.

** Task Operations

*** Short description

    Tasks are objects that allow you to execute code in another thread and share data between threads.

*** Implementation details

    Tasks contain three elements:

    1. A Body, an instruction that is executed when the Task is run.
    2. A State, a object that contains the state of the Task.  The Body is run inside the State object. It is persistent across Task runs.
    3. A Queue, a object that cannot be reached directly but which facilitates data sharing across tasks without worrying about race conditions or other details.

    Tasks use mutexes to ensure data is transferred correctly between threads.

*** Task operations

    - =task SLOT INSTRUCTION |OBJECT|= --- Sets =SLOT= to contain a new Task with its Body given by the =INSTRUCTION= and the initial state being set to =OBJECT=.  If no =OBJECT= argument is given, the initial state is a object containing only the basic operations (the object always contains the basic operations even if they are not in the initial object passed to =Task=).

    - =run-task TASK= --- executes the Task's Body in a separate thread.  The same Task object cannot be running in two threads.  The operation will give an Error if it is already running.

    - =queue SLOT DATA |TASK|= --- Sets the =SLOT= in the Queue of =TASK= to value =DATA=.  If the =TASK= argument is omitted, it is assumed to be set in the queue of the current task (for sharing Task data with another thread).  =queue= cannot be used for the main SLOBIL Task.

    - =accept SLOT |TASK|= --- Waits until =SLOT= has a value in =TASK='s Queue.  Once it finds a value, set the =/ans= slot to that value.  If =TASK= is omitted, wait for the current Task's Queue to be set.

    - =select SLOT1 INSTRUCTION1 SLOT2 INSTRUCTION2 ... SLOTN INSTRUCTIONN= --- Waits for the Queue in the current task to contain data at any of the Slots (it will prefer earlier Slots if data is available at both).  Once it receives data, it sets the =/ans= slot to the data and executes the Instruction in the current object.

    - =accept-or SLOT INSTRUCTION |TASK|= --- Checks if =SLOT= is set in =TASK='s Queue.  If it is, the =/ans= slot is set to the result. If it is not, it executes =INSTRUCTION=. If =TASK= is omitted, search in the current =TASK='s Queue.

** Control flow operations

   - =if BOOLEAN VALUE1 |VALUE2|= --- if the first argument is =True=, sets the =/ans= slot to =VALUE1=, if it is =False=, sets the =/ans= slot to =VALUE2=.  If =VALUE2= is omitted, do nothing if the first argument is =False=.

   - =while INSTRUCTION1 INSTRUCTION2= --- Call =INSTRUCTION1= in the current Object. If it sets its =/ans= slot to =True=, call =INSTRUCTION2=.  Repeat.

   - =repeat INTEGER INSTRUCTION= --- call =INSTRUCTION= =INTEGER= times.

   - =please INSTRUCTION1 INSTRUCTION2= --- Call =INSTRUCTION1=.  If there is an error, then call =INSTRUCTION2=.

** Environment operations

*** Modify the /ans slot

    - =answer VALUE= --- set the =/ans= slot to =VALUE=.

    - =sit= --- do nothing but lookup all arguments (causes Expressions --- instructions in curly brackets --- to be executed).

*** Exit SLOBIL

    - =exit= --- exit SLOBIL.

*** Print output

    - =print VALUE |BOOLEAN|= --- prints =VALUE= to screen.  If =BOOLEAN= is =False=, then omit the newline (default: add newline after printing value).
      
*** Input and output files and state

    - =source STRING= --- executes SLOBIL code in the file named by STRING.

    - =save FILENAME= --- save the contents of the current object to file.

    - =load FILENAME= --- load the contents of a saved file into the environment.

    - =output-code STRING= --- outputs the code that has been entered at the prompt so far to the file named STRING.

    - =clear-code= --- clear code that has been entered so far so that the code that =output-code= outputs will be empty.


*** Error handling

    - =error STRING |INTEGER|= --- outputs error message String and sets an error code INTEGER (if specified, otherwise, the error number is =1=).

    - =is-error INSTRUCTION= --- sets the =/ans= Slot to =True= if there was an error executing the =INSTRUCTION= and to =False= otherwise.

    - =ignore-errors INSTRUCTION= --- ignore any errors while executing the instruction, i.e. go to the next statement if one statement errors.

*** Version

    - =version= --- sets the =/ans= Slot to a String giving the version of SLOBIL.

** System operations
*** Interacting with the shell

    - =shell STRING= --- execute the shell command =STRING=.

    - =change-dir STRING= --- change directory to the location given in =STRING=.

    - =current-dir= --- set the =/ans= Slot to a String giving the current directory.

*** Time

    - =clock= --- set the =/ans= slot to the current time in milliseconds from January 1, 1970.

    - =make-time INTEGER= --- given a clock value in milliseconds (as returned by =clock=) return a object with elements =second= (a number of seconds between 0-59), =minute= (giving a number between 0-59), =hour= (a number between 0-23), =day= (giving a number between 1-31),

    - =make-clock OBJECT= --- make a clock value in milliseconds from a object describing the time (like the object returned by =make-time=)

*** Random numbers

    - =rand |INTEGER|= --- set the =/ans= Slot to a uniformly distributed random Real between 0 and 1.  If =INTEGER= is provided, set the seed to the =INTEGER= before drawing random value.

** Package operations

   - =use STRING= --- load a saved object in =~/.darbs/= with the extension =.darb= into the current object. The file being loaded is: =~/.darbs/STRING.darb=.

   - =build STRING OBJECT= --- saves contents of object to =~/.darbs/STRING.darb= so that it can be loaded as a package.

   - =link STRING1 STRING2 STRING3= --- loads shared object file =STRING1= and its function named =STRING2= into SLOBIL operation named =STRING3=.  

** Interpreter options

*** Operation

    - =interpreter SLOT VALUE= --- sets interpreter option =SLOT= to =VALUE=.

*** List of options

    - =/print-ans= --- if =True= (default) or any non-Boolean value, then print the value of the =/ans= Slot at the end of commands, if =False= suppress printing.

    - =/auto-rehash= --- if =True= (default) or any non-Boolean value, then rehash objects automatically as they grow in size.  If =False= do not rehash automatically.

    - =/print-errors= --- if =True= (default) or any non-Boolean value, then print error descriptions.  if =False=, do not print error descriptions.

* Saved Objects


  *Note*: When saving, only "permanent" data is written to disk.  For example, operations written in C will not be written to disk because these are linked in at run time.  File values will also not be written to disk because the file stream would need to be re-opened after restarting SLOBIL in any case; it has no permanent information.  All other data types are written to disk.

  This section will describe the storage format for SLOBIL saved files.  A user or programmer will never need to know the internal structure of the save file, but it will be provided here to have complete documentation and to perhaps be useful to people writing a C extension to SLOBIL.

* GNU Free Documentation License

  #+BEGIN_EXPORT html

  <h3 style="text-align: center;">GNU Free Documentation License</h3>

  <p style="text-align: center;">Version 1.3, 3 November 2008</p>

  <p> Copyright &copy; 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
       &lt;<a href="https://fsf.org/">https://fsf.org/</a>&gt;
   </p><p>Everyone is permitted to copy and distribute verbatim copies
   of this license document, but changing it is not allowed.</p>

  <h4><a name="section0"></a>0. PREAMBLE</h4>

  <p>The purpose of this License is to make a manual, textbook, or other
  functional and useful document &quot;free&quot; in the sense of freedom: to
  assure everyone the effective freedom to copy and redistribute it,
  with or without modifying it, either commercially or noncommercially.
  Secondarily, this License preserves for the author and publisher a way
  to get credit for their work, while not being considered responsible
  for modifications made by others.</p>

  <p>This License is a kind of &quot;copyleft&quot;, which means that derivative
  works of the document must themselves be free in the same sense.  It
  complements the GNU General Public License, which is a copyleft
  license designed for free software.</p>

  <p>We have designed this License in order to use it for manuals for free
  software, because free software needs free documentation: a free
  program should come with manuals providing the same freedoms that the
  software does.  But this License is not limited to software manuals;
  it can be used for any textual work, regardless of subject matter or
  whether it is published as a printed book.  We recommend this License
  principally for works whose purpose is instruction or reference.</p>

  <h4><a name="section1"></a>1. APPLICABILITY AND DEFINITIONS</h4>

  <p>This License applies to any manual or other work, in any medium, that
  contains a notice placed by the copyright holder saying it can be
  distributed under the terms of this License.  Such a notice grants a
  world-wide, royalty-free license, unlimited in duration, to use that
  work under the conditions stated herein.  The &quot;Document&quot;, below,
  refers to any such manual or work.  Any member of the public is a
  licensee, and is addressed as &quot;you&quot;.  You accept the license if you
  copy, modify or distribute the work in a way requiring permission
  under copyright law.</p>

  <p>A &quot;Modified Version&quot; of the Document means any work containing the
  Document or a portion of it, either copied verbatim, or with
  modifications and/or translated into another language.</p>

  <p>A &quot;Secondary Section&quot; is a named appendix or a front-matter section of
  the Document that deals exclusively with the relationship of the
  publishers or authors of the Document to the Document's overall
  subject (or to related matters) and contains nothing that could fall
  directly within that overall subject.  (Thus, if the Document is in
  part a textbook of mathematics, a Secondary Section may not explain
  any mathematics.)  The relationship could be a matter of historical
  connection with the subject or with related matters, or of legal,
  commercial, philosophical, ethical or political position regarding
  them.</p>

  <p>The &quot;Invariant Sections&quot; are certain Secondary Sections whose titles
  are designated, as being those of Invariant Sections, in the notice
  that says that the Document is released under this License.  If a
  section does not fit the above definition of Secondary then it is not
  allowed to be designated as Invariant.  The Document may contain zero
  Invariant Sections.  If the Document does not identify any Invariant
  Sections then there are none.</p>

  <p>The &quot;Cover Texts&quot; are certain short passages of text that are listed,
  as Front-Cover Texts or Back-Cover Texts, in the notice that says that
  the Document is released under this License.  A Front-Cover Text may
  be at most 5 words, and a Back-Cover Text may be at most 25 words.</p>

  <p>A &quot;Transparent&quot; copy of the Document means a machine-readable copy,
  represented in a format whose specification is available to the
  general public, that is suitable for revising the document
  straightforwardly with generic text editors or (for images composed of
  pixels) generic paint programs or (for drawings) some widely available
  drawing editor, and that is suitable for input to text formatters or
  for automatic translation to a variety of formats suitable for input
  to text formatters.  A copy made in an otherwise Transparent file
  format whose markup, or absence of markup, has been arranged to thwart
  or discourage subsequent modification by readers is not Transparent.
  An image format is not Transparent if used for any substantial amount
  of text.  A copy that is not &quot;Transparent&quot; is called &quot;Opaque&quot;.</p>

  <p>Examples of suitable formats for Transparent copies include plain
  ASCII without markup, Texinfo input format, LaTeX input format, SGML
  or XML using a publicly available DTD, and standard-conforming simple
  HTML, PostScript or PDF designed for human modification.  Examples of
  transparent image formats include PNG, XCF and JPG.  Opaque formats
  include proprietary formats that can be read and edited only by
  proprietary word processors, SGML or XML for which the DTD and/or
  processing tools are not generally available, and the
  machine-generated HTML, PostScript or PDF produced by some word
  processors for output purposes only.</p>

  <p>The &quot;Title Page&quot; means, for a printed book, the title page itself,
  plus such following pages as are needed to hold, legibly, the material
  this License requires to appear in the title page.  For works in
  formats which do not have any title page as such, &quot;Title Page&quot; means
  the text near the most prominent appearance of the work's title,
  preceding the beginning of the body of the text.</p>

  <p>The &quot;publisher&quot; means any person or entity that distributes copies of
  the Document to the public.</p>

  <p>A section &quot;Entitled XYZ&quot; means a named subunit of the Document whose
  title either is precisely XYZ or contains XYZ in parentheses following
  text that translates XYZ in another language.  (Here XYZ stands for a
  specific section name mentioned below, such as &quot;Acknowledgements&quot;,
  &quot;Dedications&quot;, &quot;Endorsements&quot;, or &quot;History&quot;.)  To &quot;Preserve the Title&quot;
  of such a section when you modify the Document means that it remains a
  section &quot;Entitled XYZ&quot; according to this definition.</p>

  <p>The Document may include Warranty Disclaimers next to the notice which
  states that this License applies to the Document.  These Warranty
  Disclaimers are considered to be included by reference in this
  License, but only as regards disclaiming warranties: any other
  implication that these Warranty Disclaimers may have is void and has
  no effect on the meaning of this License.</p>

  <h4><a name="section2"></a>2. VERBATIM COPYING</h4>

  <p>You may copy and distribute the Document in any medium, either
  commercially or noncommercially, provided that this License, the
  copyright notices, and the license notice saying this License applies
  to the Document are reproduced in all copies, and that you add no
  other conditions whatsoever to those of this License.  You may not use
  technical measures to obstruct or control the reading or further
  copying of the copies you make or distribute.  However, you may accept
  compensation in exchange for copies.  If you distribute a large enough
  number of copies you must also follow the conditions in section 3.</p>

  <p>You may also lend copies, under the same conditions stated above, and
  you may publicly display copies.</p>

  <h4><a name="section3"></a>3. COPYING IN QUANTITY</h4>

  <p>If you publish printed copies (or copies in media that commonly have
  printed covers) of the Document, numbering more than 100, and the
  Document's license notice requires Cover Texts, you must enclose the
  copies in covers that carry, clearly and legibly, all these Cover
  Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
  the back cover.  Both covers must also clearly and legibly identify
  you as the publisher of these copies.  The front cover must present
  the full title with all words of the title equally prominent and
  visible.  You may add other material on the covers in addition.
  Copying with changes limited to the covers, as long as they preserve
  the title of the Document and satisfy these conditions, can be treated
  as verbatim copying in other respects.</p>

  <p>If the required texts for either cover are too voluminous to fit
  legibly, you should put the first ones listed (as many as fit
  reasonably) on the actual cover, and continue the rest onto adjacent
  pages.</p>

  <p>If you publish or distribute Opaque copies of the Document numbering
  more than 100, you must either include a machine-readable Transparent
  copy along with each Opaque copy, or state in or with each Opaque copy
  a computer-network location from which the general network-using
  public has access to download using public-standard network protocols
  a complete Transparent copy of the Document, free of added material.
  If you use the latter option, you must take reasonably prudent steps,
  when you begin distribution of Opaque copies in quantity, to ensure
  that this Transparent copy will remain thus accessible at the stated
  location until at least one year after the last time you distribute an
  Opaque copy (directly or through your agents or retailers) of that
  edition to the public.</p>

  <p>It is requested, but not required, that you contact the authors of the
  Document well before redistributing any large number of copies, to
  give them a chance to provide you with an updated version of the
  Document.</p>

  <h4><a name="section4"></a>4. MODIFICATIONS</h4>

  <p>You may copy and distribute a Modified Version of the Document under
  the conditions of sections 2 and 3 above, provided that you release
  the Modified Version under precisely this License, with the Modified
  Version filling the role of the Document, thus licensing distribution
  and modification of the Modified Version to whoever possesses a copy
  of it.  In addition, you must do these things in the Modified Version:</p>

  <ul>


  <li>A. Use in the Title Page (and on the covers, if any) a title distinct
     from that of the Document, and from those of previous versions
     (which should, if there were any, be listed in the History section
     of the Document).  You may use the same title as a previous version
     if the original publisher of that version gives permission.
  </li>

  <li>B. List on the Title Page, as authors, one or more persons or entities
     responsible for authorship of the modifications in the Modified
     Version, together with at least five of the principal authors of the
     Document (all of its principal authors, if it has fewer than five),
     unless they release you from this requirement.
  </li>

  <li>C. State on the Title page the name of the publisher of the
     Modified Version, as the publisher.
  </li>

  <li>D. Preserve all the copyright notices of the Document.
  </li>

  <li>E. Add an appropriate copyright notice for your modifications
     adjacent to the other copyright notices.
  </li>

  <li>F. Include, immediately after the copyright notices, a license notice
     giving the public permission to use the Modified Version under the
     terms of this License, in the form shown in the Addendum below.
  </li>

  <li>G. Preserve in that license notice the full lists of Invariant Sections
     and required Cover Texts given in the Document's license notice.
  </li>

  <li>H. Include an unaltered copy of this License.
  </li>

  <li>I. Preserve the section Entitled &quot;History&quot;, Preserve its Title, and add
     to it an item stating at least the title, year, new authors, and
     publisher of the Modified Version as given on the Title Page.  If
     there is no section Entitled &quot;History&quot; in the Document, create one
     stating the title, year, authors, and publisher of the Document as
     given on its Title Page, then add an item describing the Modified
     Version as stated in the previous sentence.
  </li>

  <li>J. Preserve the network location, if any, given in the Document for
     public access to a Transparent copy of the Document, and likewise
     the network locations given in the Document for previous versions
     it was based on.  These may be placed in the &quot;History&quot; section.
     You may omit a network location for a work that was published at
     least four years before the Document itself, or if the original
     publisher of the version it refers to gives permission.
  </li>

  <li>K. For any section Entitled &quot;Acknowledgements&quot; or &quot;Dedications&quot;,
     Preserve the Title of the section, and preserve in the section all
     the substance and tone of each of the contributor acknowledgements
     and/or dedications given therein.
  </li>

  <li>L. Preserve all the Invariant Sections of the Document,
     unaltered in their text and in their titles.  Section numbers
     or the equivalent are not considered part of the section titles.
  </li>

  <li>M. Delete any section Entitled &quot;Endorsements&quot;.  Such a section
     may not be included in the Modified Version.
  </li>

  <li>N. Do not retitle any existing section to be Entitled &quot;Endorsements&quot;
     or to conflict in title with any Invariant Section.
  </li>

  <li>O. Preserve any Warranty Disclaimers.</li>

  </ul>

  <p>If the Modified Version includes new front-matter sections or
  appendices that qualify as Secondary Sections and contain no material
  copied from the Document, you may at your option designate some or all
  of these sections as invariant.  To do this, add their titles to the
  list of Invariant Sections in the Modified Version's license notice.
  These titles must be distinct from any other section titles.</p>

  <p>You may add a section Entitled &quot;Endorsements&quot;, provided it contains
  nothing but endorsements of your Modified Version by various
  parties&mdash;for example, statements of peer review or that the text has
  been approved by an organization as the authoritative definition of a
  standard.</p>

  <p>You may add a passage of up to five words as a Front-Cover Text, and a
  passage of up to 25 words as a Back-Cover Text, to the end of the list
  of Cover Texts in the Modified Version.  Only one passage of
  Front-Cover Text and one of Back-Cover Text may be added by (or
  through arrangements made by) any one entity.  If the Document already
  includes a cover text for the same cover, previously added by you or
  by arrangement made by the same entity you are acting on behalf of,
  you may not add another; but you may replace the old one, on explicit
  permission from the previous publisher that added the old one.</p>

  <p>The author(s) and publisher(s) of the Document do not by this License
  give permission to use their names for publicity for or to assert or
  imply endorsement of any Modified Version.</p>

  <h4><a name="section5"></a>5. COMBINING DOCUMENTS</h4>

  <p>You may combine the Document with other documents released under this
  License, under the terms defined in section 4 above for modified
  versions, provided that you include in the combination all of the
  Invariant Sections of all of the original documents, unmodified, and
  list them all as Invariant Sections of your combined work in its
  license notice, and that you preserve all their Warranty Disclaimers.</p>

  <p>The combined work need only contain one copy of this License, and
  multiple identical Invariant Sections may be replaced with a single
  copy.  If there are multiple Invariant Sections with the same name but
  different contents, make the title of each such section unique by
  adding at the end of it, in parentheses, the name of the original
  author or publisher of that section if known, or else a unique number.
  Make the same adjustment to the section titles in the list of
  Invariant Sections in the license notice of the combined work.</p>

  <p>In the combination, you must combine any sections Entitled &quot;History&quot;
  in the various original documents, forming one section Entitled
  &quot;History&quot;; likewise combine any sections Entitled &quot;Acknowledgements&quot;,
  and any sections Entitled &quot;Dedications&quot;.  You must delete all sections
  Entitled &quot;Endorsements&quot;.</p>

  <h4><a name="section6"></a>6. COLLECTIONS OF DOCUMENTS</h4>

  <p>You may make a collection consisting of the Document and other
  documents released under this License, and replace the individual
  copies of this License in the various documents with a single copy
  that is included in the collection, provided that you follow the rules
  of this License for verbatim copying of each of the documents in all
  other respects.</p>

  <p>You may extract a single document from such a collection, and
  distribute it individually under this License, provided you insert a
  copy of this License into the extracted document, and follow this
  License in all other respects regarding verbatim copying of that
  document.</p>

  <h4><a name="section7"></a>7. AGGREGATION WITH INDEPENDENT WORKS</h4>

  <p>A compilation of the Document or its derivatives with other separate
  and independent documents or works, in or on a volume of a storage or
  distribution medium, is called an &quot;aggregate&quot; if the copyright
  resulting from the compilation is not used to limit the legal rights
  of the compilation's users beyond what the individual works permit.
  When the Document is included in an aggregate, this License does not
  apply to the other works in the aggregate which are not themselves
  derivative works of the Document.</p>

  <p>If the Cover Text requirement of section 3 is applicable to these
  copies of the Document, then if the Document is less than one half of
  the entire aggregate, the Document's Cover Texts may be placed on
  covers that bracket the Document within the aggregate, or the
  electronic equivalent of covers if the Document is in electronic form.
  Otherwise they must appear on printed covers that bracket the whole
  aggregate.</p>

  <h4><a name="section8"></a>8. TRANSLATION</h4>

  <p>Translation is considered a kind of modification, so you may
  distribute translations of the Document under the terms of section 4.
  Replacing Invariant Sections with translations requires special
  permission from their copyright holders, but you may include
  translations of some or all Invariant Sections in addition to the
  original versions of these Invariant Sections.  You may include a
  translation of this License, and all the license notices in the
  Document, and any Warranty Disclaimers, provided that you also include
  the original English version of this License and the original versions
  of those notices and disclaimers.  In case of a disagreement between
  the translation and the original version of this License or a notice
  or disclaimer, the original version will prevail.</p>

  <p>If a section in the Document is Entitled &quot;Acknowledgements&quot;,
  &quot;Dedications&quot;, or &quot;History&quot;, the requirement (section 4) to Preserve
  its Title (section 1) will typically require changing the actual
  title.</p>

  <h4><a name="section9"></a>9. TERMINATION</h4>

  <p>You may not copy, modify, sublicense, or distribute the Document
  except as expressly provided under this License.  Any attempt
  otherwise to copy, modify, sublicense, or distribute it is void, and
  will automatically terminate your rights under this License.</p>

  <p>However, if you cease all violation of this License, then your license
  from a particular copyright holder is reinstated (a) provisionally,
  unless and until the copyright holder explicitly and finally
  terminates your license, and (b) permanently, if the copyright holder
  fails to notify you of the violation by some reasonable means prior to
  60 days after the cessation.</p>

  <p>Moreover, your license from a particular copyright holder is
  reinstated permanently if the copyright holder notifies you of the
  violation by some reasonable means, this is the first time you have
  received notice of violation of this License (for any work) from that
  copyright holder, and you cure the violation prior to 30 days after
  your receipt of the notice.</p>

  <p>Termination of your rights under this section does not terminate the
  licenses of parties who have received copies or rights from you under
  this License.  If your rights have been terminated and not permanently
  reinstated, receipt of a copy of some or all of the same material does
  not give you any rights to use it.</p>

  <h4><a name="section10"></a>10. FUTURE REVISIONS OF THIS LICENSE</h4>

  <p>The Free Software Foundation may publish new, revised versions of the
  GNU Free Documentation License from time to time.  Such new versions
  will be similar in spirit to the present version, but may differ in
  detail to address new problems or concerns.  See
  <a href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</a>.</p>

  <p>Each version of the License is given a distinguishing version number.
  If the Document specifies that a particular numbered version of this
  License &quot;or any later version&quot; applies to it, you have the option of
  following the terms and conditions either of that specified version or
  of any later version that has been published (not as a draft) by the
  Free Software Foundation.  If the Document does not specify a version
  number of this License, you may choose any version ever published (not
  as a draft) by the Free Software Foundation.  If the Document
  specifies that a proxy can decide which future versions of this
  License can be used, that proxy's public statement of acceptance of a
  version permanently authorizes you to choose that version for the
  Document.</p>

  <h4><a name="section11"></a>11. RELICENSING</h4>

  <p>&quot;Massive Multiauthor Collaboration Site&quot; (or &quot;MMC Site&quot;) means any
  World Wide Web server that publishes copyrightable works and also
  provides prominent facilities for anybody to edit those works.  A
  public wiki that anybody can edit is an example of such a server.  A
  &quot;Massive Multiauthor Collaboration&quot; (or &quot;MMC&quot;) contained in the site
  means any set of copyrightable works thus published on the MMC site.</p>

  <p>&quot;CC-BY-SA&quot; means the Creative Commons Attribution-Share Alike 3.0 
  license published by Creative Commons Corporation, a not-for-profit 
  corporation with a principal place of business in San Francisco, 
  California, as well as future copyleft versions of that license 
  published by that same organization.</p>

  <p>&quot;Incorporate&quot; means to publish or republish a Document, in whole or in 
  part, as part of another Document.</p>

  <p>An MMC is &quot;eligible for relicensing&quot; if it is licensed under this 
  License, and if all works that were first published under this License 
  somewhere other than this MMC, and subsequently incorporated in whole or 
  in part into the MMC, (1) had no cover texts or invariant sections, and 
  (2) were thus incorporated prior to November 1, 2008.</p>

  <p>The operator of an MMC Site may republish an MMC contained in the site
  under CC-BY-SA on the same site at any time before August 1, 2009,
  provided the MMC is eligible for relicensing.</p>

  <h3><a name="addendum"></a>ADDENDUM: How to use this License for your documents</h3>

  <p>To use this License in a document you have written, include a copy of
  the License in the document and put the following copyright and
  license notices just after the title page:</p>

  <pre>    Copyright (C)  YEAR  YOUR NAME.
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.3
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
      A copy of the license is included in the section entitled &quot;GNU
      Free Documentation License&quot;.
  </pre>

  <p>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
  replace the &quot;with &hellip; Texts.&quot; line with this:</p>

  <pre>    with the Invariant Sections being LIST THEIR TITLES, with the
      Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
  </pre>

  <p>If you have Invariant Sections without Cover Texts, or some other
  combination of the three, merge those two alternatives to suit the
  situation.</p>

  <p>If your document contains nontrivial examples of program code, we
  recommend releasing these examples in parallel under your choice of
  free software license, such as the GNU General Public License,
  to permit their use in free software.
  </p>


  #+END_EXPORT
